=begin
#Lemonway DirectKit API 2.0

## Introduction    This service provides methods for automating the management of the accounts and operations.    __A strict control access on the IP is applied, make sure you have the rights before requesting the API.__    Please note that this version of the API is in pilot stage, and therefore may evolve in the future. Should you be interested in integrating this version, please contact your Lemon Way account manager or <a href=\"https://support.lemonway.com/hc/requests/new\" target=\"_blank\">the support team</a>.    # Authentication    The authentication service strictly follow the __chapter 4.4.2__ [Access Token request](https://tools.ietf.org/html/rfc6749#section-4.4.2) of the __RFC 6749__.    The unique method exposed by the api provides a unique bearer access associate a unique directkit. All dikectkit and environment have their own access.    The bearer allow an application to consume the api Rest Directkit    __This response has these scenarios:__  * In case the bearer do not exist, the method create a new bearer.  * In case the bearer already exist, it return the actual bearer with the remaining time left.  * In case the bearer lifetime is over, a new one is created, the old one is permanently deleted.  * In case of failure, a http statut code error with succinct information for security purpose.    # oauth2    __cURL example__:    ```  curl -X POST \"https://authentication.lemonway.com/v1/token\"      -H \"accept: application/json;charset=UTF-8\"      -H \"Authorization: Basic 375d7fd6-f1c3-41ed-82c6-c273fe384318\"      -H \"Content_Type: application/x-www-form-urlencoded\"      -d \"grant_type=client_credentials\"  ```    The OAuth2 documentation is available at this link [OAuth2 authentication](https://172.31.0.84:8082/oauth2-public/token/swagger).    Once you call the method, and if the informations provided are corrects, you will get a response with a bearer.    Use the provided bearer to request the directkit service    __Response example__:  ```  {      \"access_token\": \"4442659a-bebc-4afb-8fbd-21d19ae11972\", // unique bearer access      \"token_type\": \"Bearer\",      \"expires_in\": 3600 // secondes  }  ```    ___Note: Use the same method to renew your bearer once it got expired___    # Notifications    The __WHITE BRAND__ may want to receive notifications when __certain events are triggered__ (e.g. on payment account status change, on documentation status change...).  These notifications can be received by e-mail (HTML format) or be sent to an information system (webhooks / callbacks through HTTP POST or GET). For more information about notifications, please visit [the notifications documentation](https://documentation.lemonway.com/en/notifications).  To activate notifications, please log on the __WHITE BRAND back-office__ and go to the \"__Configuration/Notifications__\" menu.

OpenAPI spec version: v2

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.12

=end

require 'uri'

module SwaggerClient
  class MoneyInsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # looking for a MONEY-IN by fund transfer
    # Use GetMoneyInIBANStatus to obtain the list of all MONEY-IN by fund transfer (not by card payment) received by Lemon Way, starting from an entry date given in input to this method.
    # @param update_date UTC Unix timestamp.
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page index start from 1, let null to get all
    # @option opts [Integer] :limit default 20, let it null if no pagination
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [GetMoneyInIBANDetailsOutput]
    def money_ins_bankwire_get(update_date, authorization, psu_ip_address, opts = {})
      data, _status_code, _headers = money_ins_bankwire_get_with_http_info(update_date, authorization, psu_ip_address, opts)
      data
    end

    # looking for a MONEY-IN by fund transfer
    # Use GetMoneyInIBANStatus to obtain the list of all MONEY-IN by fund transfer (not by card payment) received by Lemon Way, starting from an entry date given in input to this method.
    # @param update_date UTC Unix timestamp.
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page index start from 1, let null to get all
    # @option opts [Integer] :limit default 20, let it null if no pagination
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [Array<(GetMoneyInIBANDetailsOutput, Fixnum, Hash)>] GetMoneyInIBANDetailsOutput data, response status code and response headers
    def money_ins_bankwire_get_with_http_info(update_date, authorization, psu_ip_address, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MoneyInsApi.money_ins_bankwire_get ...'
      end
      # verify the required parameter 'update_date' is set
      if @api_client.config.client_side_validation && update_date.nil?
        fail ArgumentError, "Missing the required parameter 'update_date' when calling MoneyInsApi.money_ins_bankwire_get"
      end
      if @api_client.config.client_side_validation && update_date !~ Regexp.new(/^-?\\d{1,12}$/)
        fail ArgumentError, "invalid value for 'update_date' when calling MoneyInsApi.money_ins_bankwire_get, must conform to the pattern /^-?\\d{1,12}$/."
      end

      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling MoneyInsApi.money_ins_bankwire_get"
      end
      # verify the required parameter 'psu_ip_address' is set
      if @api_client.config.client_side_validation && psu_ip_address.nil?
        fail ArgumentError, "Missing the required parameter 'psu_ip_address' when calling MoneyInsApi.money_ins_bankwire_get"
      end
      # resource path
      local_var_path = '/v2/moneyins/bankwire'

      # query parameters
      query_params = {}
      query_params[:'updateDate'] = update_date
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Authorization'] = authorization
      header_params[:'PSU-IP-Address'] = psu_ip_address
      header_params[:'PSU-Accept-Language'] = opts[:'psu_accept_language'] if !opts[:'psu_accept_language'].nil?
      header_params[:'PSU-User-Agent'] = opts[:'psu_user_agent'] if !opts[:'psu_user_agent'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetMoneyInIBANDetailsOutput')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MoneyInsApi#money_ins_bankwire_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a dedicated IBAN
    # This functionality enables the WHITE BRAND to create dedicated (virtual) IBANs. These IBANs are linked to a dedicated payment account and give the possibility to the WHITE BRAND to receive wire transfers directly to these accounts. The payment schema must be validated prior with Lemon Way. This function should be called once the WHITE BRAND is certain a payment will be received. We strongly advise against associating an IBAN to a payment account preventively. Please contact your account manager to have this function activated.
    # @param parameters 
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [CreateIBANOutput]
    def money_ins_bankwire_iban_create_post(parameters, authorization, psu_ip_address, opts = {})
      data, _status_code, _headers = money_ins_bankwire_iban_create_post_with_http_info(parameters, authorization, psu_ip_address, opts)
      data
    end

    # Create a dedicated IBAN
    # This functionality enables the WHITE BRAND to create dedicated (virtual) IBANs. These IBANs are linked to a dedicated payment account and give the possibility to the WHITE BRAND to receive wire transfers directly to these accounts. The payment schema must be validated prior with Lemon Way. This function should be called once the WHITE BRAND is certain a payment will be received. We strongly advise against associating an IBAN to a payment account preventively. Please contact your account manager to have this function activated.
    # @param parameters 
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [Array<(CreateIBANOutput, Fixnum, Hash)>] CreateIBANOutput data, response status code and response headers
    def money_ins_bankwire_iban_create_post_with_http_info(parameters, authorization, psu_ip_address, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MoneyInsApi.money_ins_bankwire_iban_create_post ...'
      end
      # verify the required parameter 'parameters' is set
      if @api_client.config.client_side_validation && parameters.nil?
        fail ArgumentError, "Missing the required parameter 'parameters' when calling MoneyInsApi.money_ins_bankwire_iban_create_post"
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling MoneyInsApi.money_ins_bankwire_iban_create_post"
      end
      # verify the required parameter 'psu_ip_address' is set
      if @api_client.config.client_side_validation && psu_ip_address.nil?
        fail ArgumentError, "Missing the required parameter 'psu_ip_address' when calling MoneyInsApi.money_ins_bankwire_iban_create_post"
      end
      # resource path
      local_var_path = '/v2/moneyins/bankwire/iban/create'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])
      header_params[:'Authorization'] = authorization
      header_params[:'PSU-IP-Address'] = psu_ip_address
      header_params[:'PSU-Accept-Language'] = opts[:'psu_accept_language'] if !opts[:'psu_accept_language'].nil?
      header_params[:'PSU-User-Agent'] = opts[:'psu_user_agent'] if !opts[:'psu_user_agent'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(parameters)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CreateIBANOutput')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MoneyInsApi#money_ins_bankwire_iban_create_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Disable a dedicated IBAN
    # This functionality enables the WHITE BRAND to disable dedicated IBANs.
    # @param ibanid 
    # @param parameters 
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [DisableIBANOutput]
    def money_ins_bankwire_iban_disable_post(ibanid, parameters, authorization, psu_ip_address, opts = {})
      data, _status_code, _headers = money_ins_bankwire_iban_disable_post_with_http_info(ibanid, parameters, authorization, psu_ip_address, opts)
      data
    end

    # Disable a dedicated IBAN
    # This functionality enables the WHITE BRAND to disable dedicated IBANs.
    # @param ibanid 
    # @param parameters 
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [Array<(DisableIBANOutput, Fixnum, Hash)>] DisableIBANOutput data, response status code and response headers
    def money_ins_bankwire_iban_disable_post_with_http_info(ibanid, parameters, authorization, psu_ip_address, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MoneyInsApi.money_ins_bankwire_iban_disable_post ...'
      end
      # verify the required parameter 'ibanid' is set
      if @api_client.config.client_side_validation && ibanid.nil?
        fail ArgumentError, "Missing the required parameter 'ibanid' when calling MoneyInsApi.money_ins_bankwire_iban_disable_post"
      end
      # verify the required parameter 'parameters' is set
      if @api_client.config.client_side_validation && parameters.nil?
        fail ArgumentError, "Missing the required parameter 'parameters' when calling MoneyInsApi.money_ins_bankwire_iban_disable_post"
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling MoneyInsApi.money_ins_bankwire_iban_disable_post"
      end
      # verify the required parameter 'psu_ip_address' is set
      if @api_client.config.client_side_validation && psu_ip_address.nil?
        fail ArgumentError, "Missing the required parameter 'psu_ip_address' when calling MoneyInsApi.money_ins_bankwire_iban_disable_post"
      end
      # resource path
      local_var_path = '/v2/moneyins/bankwire/iban/{ibanid}/disable'.sub('{' + 'ibanid' + '}', ibanid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])
      header_params[:'Authorization'] = authorization
      header_params[:'PSU-IP-Address'] = psu_ip_address
      header_params[:'PSU-Accept-Language'] = opts[:'psu_accept_language'] if !opts[:'psu_accept_language'].nil?
      header_params[:'PSU-User-Agent'] = opts[:'psu_user_agent'] if !opts[:'psu_user_agent'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(parameters)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DisableIBANOutput')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MoneyInsApi#money_ins_bankwire_iban_disable_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Cancel a money in
    # With the \"CancelMoneyIn\" method, the WHITE BRAND can cancel a pre-authorization / SDD request.
    # @param transactionid 
    # @param parameters 
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [CancelMoneyInOutput]
    def money_ins_cancel_put(transactionid, parameters, authorization, psu_ip_address, opts = {})
      data, _status_code, _headers = money_ins_cancel_put_with_http_info(transactionid, parameters, authorization, psu_ip_address, opts)
      data
    end

    # Cancel a money in
    # With the \&quot;CancelMoneyIn\&quot; method, the WHITE BRAND can cancel a pre-authorization / SDD request.
    # @param transactionid 
    # @param parameters 
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [Array<(CancelMoneyInOutput, Fixnum, Hash)>] CancelMoneyInOutput data, response status code and response headers
    def money_ins_cancel_put_with_http_info(transactionid, parameters, authorization, psu_ip_address, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MoneyInsApi.money_ins_cancel_put ...'
      end
      # verify the required parameter 'transactionid' is set
      if @api_client.config.client_side_validation && transactionid.nil?
        fail ArgumentError, "Missing the required parameter 'transactionid' when calling MoneyInsApi.money_ins_cancel_put"
      end
      # verify the required parameter 'parameters' is set
      if @api_client.config.client_side_validation && parameters.nil?
        fail ArgumentError, "Missing the required parameter 'parameters' when calling MoneyInsApi.money_ins_cancel_put"
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling MoneyInsApi.money_ins_cancel_put"
      end
      # verify the required parameter 'psu_ip_address' is set
      if @api_client.config.client_side_validation && psu_ip_address.nil?
        fail ArgumentError, "Missing the required parameter 'psu_ip_address' when calling MoneyInsApi.money_ins_cancel_put"
      end
      # resource path
      local_var_path = '/v2/moneyins/{transactionid}/cancel'.sub('{' + 'transactionid' + '}', transactionid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Authorization'] = authorization
      header_params[:'PSU-IP-Address'] = psu_ip_address
      header_params[:'PSU-Accept-Language'] = opts[:'psu_accept_language'] if !opts[:'psu_accept_language'].nil?
      header_params[:'PSU-User-Agent'] = opts[:'psu_user_agent'] if !opts[:'psu_user_agent'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(parameters)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CancelMoneyInOutput')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MoneyInsApi#money_ins_cancel_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Check moneyin 3D-Secure status
    # After initializing a 3DS transaction with MoneyIn3DInit, you can choose not to debit the card, and only check if the user has successfully authenticated using 3D Secure.<br /><br /><b>This is not a payment.</b><br /><br /><b>You cannot use both MoneyIn3DAuthenticate and MoneyIn3DConfirm. You need to choose if you only want to check if the user was correctly authenticated (use MoneyIn3DAuthenticate), or if you want to receive the payment using 3DS (use MoneyIn3DConfirm in this case).</b><br /><br />  A typical use-case: you want to allow your user to save a card for rebills (RegisterCard), but first, you want to make sure that the card belongs to the user and that the user can authenticate successfully.
    # @param transactionid 
    # @param parameters 
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [MoneyIn3DAuthenticateOutput]
    def money_ins_card_direct3_d_authenticate_post(transactionid, parameters, authorization, psu_ip_address, opts = {})
      data, _status_code, _headers = money_ins_card_direct3_d_authenticate_post_with_http_info(transactionid, parameters, authorization, psu_ip_address, opts)
      data
    end

    # Check moneyin 3D-Secure status
    # After initializing a 3DS transaction with MoneyIn3DInit, you can choose not to debit the card, and only check if the user has successfully authenticated using 3D Secure.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;This is not a payment.&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;You cannot use both MoneyIn3DAuthenticate and MoneyIn3DConfirm. You need to choose if you only want to check if the user was correctly authenticated (use MoneyIn3DAuthenticate), or if you want to receive the payment using 3DS (use MoneyIn3DConfirm in this case).&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;  A typical use-case: you want to allow your user to save a card for rebills (RegisterCard), but first, you want to make sure that the card belongs to the user and that the user can authenticate successfully.
    # @param transactionid 
    # @param parameters 
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [Array<(MoneyIn3DAuthenticateOutput, Fixnum, Hash)>] MoneyIn3DAuthenticateOutput data, response status code and response headers
    def money_ins_card_direct3_d_authenticate_post_with_http_info(transactionid, parameters, authorization, psu_ip_address, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MoneyInsApi.money_ins_card_direct3_d_authenticate_post ...'
      end
      # verify the required parameter 'transactionid' is set
      if @api_client.config.client_side_validation && transactionid.nil?
        fail ArgumentError, "Missing the required parameter 'transactionid' when calling MoneyInsApi.money_ins_card_direct3_d_authenticate_post"
      end
      # verify the required parameter 'parameters' is set
      if @api_client.config.client_side_validation && parameters.nil?
        fail ArgumentError, "Missing the required parameter 'parameters' when calling MoneyInsApi.money_ins_card_direct3_d_authenticate_post"
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling MoneyInsApi.money_ins_card_direct3_d_authenticate_post"
      end
      # verify the required parameter 'psu_ip_address' is set
      if @api_client.config.client_side_validation && psu_ip_address.nil?
        fail ArgumentError, "Missing the required parameter 'psu_ip_address' when calling MoneyInsApi.money_ins_card_direct3_d_authenticate_post"
      end
      # resource path
      local_var_path = '/v2/moneyins/card/direct/{transactionid}/3dauthenticate'.sub('{' + 'transactionid' + '}', transactionid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Authorization'] = authorization
      header_params[:'PSU-IP-Address'] = psu_ip_address
      header_params[:'PSU-Accept-Language'] = opts[:'psu_accept_language'] if !opts[:'psu_accept_language'].nil?
      header_params[:'PSU-User-Agent'] = opts[:'psu_user_agent'] if !opts[:'psu_user_agent'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(parameters)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MoneyIn3DAuthenticateOutput')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MoneyInsApi#money_ins_card_direct3_d_authenticate_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Moneyin 3D Confirm
    # This method finalizes the credit of a wallet by card after 3D Secure authentication of the CLIENT:<br />  1. After initializationwith MoneyIn3DInit, the application redirects its CLIENT on the authentication web site of the bank that did emit the card.  2. The CLIENT ahtienticates on the bank web site (SMS or password for 3D Secure depending on the bank process) than returns on the WHITE BRAND server. If using Atos, no other data will be returned. If using another partner, POST data will be returned.  3. The application calls MoneyIn3DConfirm with according data, to finalize the credit of the wallet and the debit of the payment card.
    # @param transactionid 
    # @param parameters 
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [MoneyIn3DConfirmOutput]
    def money_ins_card_direct3_d_confirm_put(transactionid, parameters, authorization, psu_ip_address, opts = {})
      data, _status_code, _headers = money_ins_card_direct3_d_confirm_put_with_http_info(transactionid, parameters, authorization, psu_ip_address, opts)
      data
    end

    # Moneyin 3D Confirm
    # This method finalizes the credit of a wallet by card after 3D Secure authentication of the CLIENT:&lt;br /&gt;  1. After initializationwith MoneyIn3DInit, the application redirects its CLIENT on the authentication web site of the bank that did emit the card.  2. The CLIENT ahtienticates on the bank web site (SMS or password for 3D Secure depending on the bank process) than returns on the WHITE BRAND server. If using Atos, no other data will be returned. If using another partner, POST data will be returned.  3. The application calls MoneyIn3DConfirm with according data, to finalize the credit of the wallet and the debit of the payment card.
    # @param transactionid 
    # @param parameters 
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [Array<(MoneyIn3DConfirmOutput, Fixnum, Hash)>] MoneyIn3DConfirmOutput data, response status code and response headers
    def money_ins_card_direct3_d_confirm_put_with_http_info(transactionid, parameters, authorization, psu_ip_address, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MoneyInsApi.money_ins_card_direct3_d_confirm_put ...'
      end
      # verify the required parameter 'transactionid' is set
      if @api_client.config.client_side_validation && transactionid.nil?
        fail ArgumentError, "Missing the required parameter 'transactionid' when calling MoneyInsApi.money_ins_card_direct3_d_confirm_put"
      end
      # verify the required parameter 'parameters' is set
      if @api_client.config.client_side_validation && parameters.nil?
        fail ArgumentError, "Missing the required parameter 'parameters' when calling MoneyInsApi.money_ins_card_direct3_d_confirm_put"
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling MoneyInsApi.money_ins_card_direct3_d_confirm_put"
      end
      # verify the required parameter 'psu_ip_address' is set
      if @api_client.config.client_side_validation && psu_ip_address.nil?
        fail ArgumentError, "Missing the required parameter 'psu_ip_address' when calling MoneyInsApi.money_ins_card_direct3_d_confirm_put"
      end
      # resource path
      local_var_path = '/v2/moneyins/card/direct/{transactionid}/3dconfirm'.sub('{' + 'transactionid' + '}', transactionid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Authorization'] = authorization
      header_params[:'PSU-IP-Address'] = psu_ip_address
      header_params[:'PSU-Accept-Language'] = opts[:'psu_accept_language'] if !opts[:'psu_accept_language'].nil?
      header_params[:'PSU-User-Agent'] = opts[:'psu_user_agent'] if !opts[:'psu_user_agent'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(parameters)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MoneyIn3DConfirmOutput')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MoneyInsApi#money_ins_card_direct3_d_confirm_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Credit an account with a non 3D Secure card payment
    # One call and you are all set, with this method. Easy to deploy, but without 3D Secure. Should only be used for mobile application. You should prefer 3D Secure payment for Internet payment.<br />  By calling this method, our system credits the wallet and debits the card, in real time.Your server has to send us the wallet ID to credit, all card data, the amount, and a comment.<br /><b>Please remember not to save any card data on your system, if your system is not PCI-DSS.</b>
    # @param parameters 
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [MoneyInOutput]
    def money_ins_card_direct_post(parameters, authorization, psu_ip_address, opts = {})
      data, _status_code, _headers = money_ins_card_direct_post_with_http_info(parameters, authorization, psu_ip_address, opts)
      data
    end

    # Credit an account with a non 3D Secure card payment
    # One call and you are all set, with this method. Easy to deploy, but without 3D Secure. Should only be used for mobile application. You should prefer 3D Secure payment for Internet payment.&lt;br /&gt;  By calling this method, our system credits the wallet and debits the card, in real time.Your server has to send us the wallet ID to credit, all card data, the amount, and a comment.&lt;br /&gt;&lt;b&gt;Please remember not to save any card data on your system, if your system is not PCI-DSS.&lt;/b&gt;
    # @param parameters 
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [Array<(MoneyInOutput, Fixnum, Hash)>] MoneyInOutput data, response status code and response headers
    def money_ins_card_direct_post_with_http_info(parameters, authorization, psu_ip_address, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MoneyInsApi.money_ins_card_direct_post ...'
      end
      # verify the required parameter 'parameters' is set
      if @api_client.config.client_side_validation && parameters.nil?
        fail ArgumentError, "Missing the required parameter 'parameters' when calling MoneyInsApi.money_ins_card_direct_post"
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling MoneyInsApi.money_ins_card_direct_post"
      end
      # verify the required parameter 'psu_ip_address' is set
      if @api_client.config.client_side_validation && psu_ip_address.nil?
        fail ArgumentError, "Missing the required parameter 'psu_ip_address' when calling MoneyInsApi.money_ins_card_direct_post"
      end
      # resource path
      local_var_path = '/v2/moneyins/card/direct'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Authorization'] = authorization
      header_params[:'PSU-IP-Address'] = psu_ip_address
      header_params[:'PSU-Accept-Language'] = opts[:'psu_accept_language'] if !opts[:'psu_accept_language'].nil?
      header_params[:'PSU-User-Agent'] = opts[:'psu_user_agent'] if !opts[:'psu_user_agent'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(parameters)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MoneyInOutput')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MoneyInsApi#money_ins_card_direct_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the card(s) associate to a payment account
    # @param accountid Account ID
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [AccountCardsOutput]
    def money_ins_card_get(accountid, authorization, psu_ip_address, opts = {})
      data, _status_code, _headers = money_ins_card_get_with_http_info(accountid, authorization, psu_ip_address, opts)
      data
    end

    # Get the card(s) associate to a payment account
    # @param accountid Account ID
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [Array<(AccountCardsOutput, Fixnum, Hash)>] AccountCardsOutput data, response status code and response headers
    def money_ins_card_get_with_http_info(accountid, authorization, psu_ip_address, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MoneyInsApi.money_ins_card_get ...'
      end
      # verify the required parameter 'accountid' is set
      if @api_client.config.client_side_validation && accountid.nil?
        fail ArgumentError, "Missing the required parameter 'accountid' when calling MoneyInsApi.money_ins_card_get"
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling MoneyInsApi.money_ins_card_get"
      end
      # verify the required parameter 'psu_ip_address' is set
      if @api_client.config.client_side_validation && psu_ip_address.nil?
        fail ArgumentError, "Missing the required parameter 'psu_ip_address' when calling MoneyInsApi.money_ins_card_get"
      end
      # resource path
      local_var_path = '/v2/moneyins/{accountid}/card'.sub('{' + 'accountid' + '}', accountid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Authorization'] = authorization
      header_params[:'PSU-IP-Address'] = psu_ip_address
      header_params[:'PSU-Accept-Language'] = opts[:'psu_accept_language'] if !opts[:'psu_accept_language'].nil?
      header_params[:'PSU-User-Agent'] = opts[:'psu_user_agent'] if !opts[:'psu_user_agent'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AccountCardsOutput')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MoneyInsApi#money_ins_card_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create payment form
    # This feature allows the WHITE BRAND create a payment form for a payer.  <ul><li>The form is accessible to public, anyone can pay with a link to the payment form</li><li>Payment forms are generated and managed by Lemonway</li><li>They support only payment by credit card (only for ATOSv1, ATOSv2 &amp; PAYXPERT)</li><li>Deferred payment is not yet supported</li></ul>
    # @param parameters 
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [CreatePaymentFormOutput]
    def money_ins_card_payment_form_post(parameters, authorization, psu_ip_address, opts = {})
      data, _status_code, _headers = money_ins_card_payment_form_post_with_http_info(parameters, authorization, psu_ip_address, opts)
      data
    end

    # Create payment form
    # This feature allows the WHITE BRAND create a payment form for a payer.  &lt;ul&gt;&lt;li&gt;The form is accessible to public, anyone can pay with a link to the payment form&lt;/li&gt;&lt;li&gt;Payment forms are generated and managed by Lemonway&lt;/li&gt;&lt;li&gt;They support only payment by credit card (only for ATOSv1, ATOSv2 &amp;amp; PAYXPERT)&lt;/li&gt;&lt;li&gt;Deferred payment is not yet supported&lt;/li&gt;&lt;/ul&gt;
    # @param parameters 
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [Array<(CreatePaymentFormOutput, Fixnum, Hash)>] CreatePaymentFormOutput data, response status code and response headers
    def money_ins_card_payment_form_post_with_http_info(parameters, authorization, psu_ip_address, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MoneyInsApi.money_ins_card_payment_form_post ...'
      end
      # verify the required parameter 'parameters' is set
      if @api_client.config.client_side_validation && parameters.nil?
        fail ArgumentError, "Missing the required parameter 'parameters' when calling MoneyInsApi.money_ins_card_payment_form_post"
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling MoneyInsApi.money_ins_card_payment_form_post"
      end
      # verify the required parameter 'psu_ip_address' is set
      if @api_client.config.client_side_validation && psu_ip_address.nil?
        fail ArgumentError, "Missing the required parameter 'psu_ip_address' when calling MoneyInsApi.money_ins_card_payment_form_post"
      end
      # resource path
      local_var_path = '/v2/moneyins/card/paymentform'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Authorization'] = authorization
      header_params[:'PSU-IP-Address'] = psu_ip_address
      header_params[:'PSU-Accept-Language'] = opts[:'psu_accept_language'] if !opts[:'psu_accept_language'].nil?
      header_params[:'PSU-User-Agent'] = opts[:'psu_user_agent'] if !opts[:'psu_user_agent'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(parameters)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CreatePaymentFormOutput')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MoneyInsApi#money_ins_card_payment_form_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Credit of a payment account with a tokenized card
    # Use this method to ask to credit a payment account with a card linked to the payment account : <br />  Your WHITE BRAND application sends the payment account ID to credit, the card ID, and the amount to credit,   and a Comment explaining the rebill <br />  Why this card is rebilled : is it a monthly payment for a service, which service,  which website, which command, with which Email.Please make sure you add all information regarding the Rebill   on this comment field. We may ask you to add more information on this field to answer complains directly coming   to our Customer Service from your customers, or from banks, or from the police, or from Visa/Mastercard, or from the regulator.
    # @param cardid 
    # @param parameters 
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [MoneyInWithCardIdOutput]
    def money_ins_card_rebill(cardid, parameters, authorization, psu_ip_address, opts = {})
      data, _status_code, _headers = money_ins_card_rebill_with_http_info(cardid, parameters, authorization, psu_ip_address, opts)
      data
    end

    # Credit of a payment account with a tokenized card
    # Use this method to ask to credit a payment account with a card linked to the payment account : &lt;br /&gt;  Your WHITE BRAND application sends the payment account ID to credit, the card ID, and the amount to credit,   and a Comment explaining the rebill &lt;br /&gt;  Why this card is rebilled : is it a monthly payment for a service, which service,  which website, which command, with which Email.Please make sure you add all information regarding the Rebill   on this comment field. We may ask you to add more information on this field to answer complains directly coming   to our Customer Service from your customers, or from banks, or from the police, or from Visa/Mastercard, or from the regulator.
    # @param cardid 
    # @param parameters 
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [Array<(MoneyInWithCardIdOutput, Fixnum, Hash)>] MoneyInWithCardIdOutput data, response status code and response headers
    def money_ins_card_rebill_with_http_info(cardid, parameters, authorization, psu_ip_address, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MoneyInsApi.money_ins_card_rebill ...'
      end
      # verify the required parameter 'cardid' is set
      if @api_client.config.client_side_validation && cardid.nil?
        fail ArgumentError, "Missing the required parameter 'cardid' when calling MoneyInsApi.money_ins_card_rebill"
      end
      # verify the required parameter 'parameters' is set
      if @api_client.config.client_side_validation && parameters.nil?
        fail ArgumentError, "Missing the required parameter 'parameters' when calling MoneyInsApi.money_ins_card_rebill"
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling MoneyInsApi.money_ins_card_rebill"
      end
      # verify the required parameter 'psu_ip_address' is set
      if @api_client.config.client_side_validation && psu_ip_address.nil?
        fail ArgumentError, "Missing the required parameter 'psu_ip_address' when calling MoneyInsApi.money_ins_card_rebill"
      end
      # resource path
      local_var_path = '/v2/moneyins/card/{cardid}/rebill'.sub('{' + 'cardid' + '}', cardid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Authorization'] = authorization
      header_params[:'PSU-IP-Address'] = psu_ip_address
      header_params[:'PSU-Accept-Language'] = opts[:'psu_accept_language'] if !opts[:'psu_accept_language'].nil?
      header_params[:'PSU-User-Agent'] = opts[:'psu_user_agent'] if !opts[:'psu_user_agent'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(parameters)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MoneyInWithCardIdOutput')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MoneyInsApi#money_ins_card_rebill\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Resgister a card
    # Create a link between a wallet and a card. Your customers won't have to enter their fastidious card details again (16 digits of the card, CVV, expiration date, card type). Less hasle for your customers.<br /><b>Make sure the login on your website is secured enough to avoid phishing. Someone else could log on your website, pretend to be a customer that did memorize its card on your website, and use someone else card to pay on your website</b>
    # @param parameters 
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [RegisterCardOutput]
    def money_ins_card_register_post(parameters, authorization, psu_ip_address, opts = {})
      data, _status_code, _headers = money_ins_card_register_post_with_http_info(parameters, authorization, psu_ip_address, opts)
      data
    end

    # Resgister a card
    # Create a link between a wallet and a card. Your customers won&#39;t have to enter their fastidious card details again (16 digits of the card, CVV, expiration date, card type). Less hasle for your customers.&lt;br /&gt;&lt;b&gt;Make sure the login on your website is secured enough to avoid phishing. Someone else could log on your website, pretend to be a customer that did memorize its card on your website, and use someone else card to pay on your website&lt;/b&gt;
    # @param parameters 
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [Array<(RegisterCardOutput, Fixnum, Hash)>] RegisterCardOutput data, response status code and response headers
    def money_ins_card_register_post_with_http_info(parameters, authorization, psu_ip_address, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MoneyInsApi.money_ins_card_register_post ...'
      end
      # verify the required parameter 'parameters' is set
      if @api_client.config.client_side_validation && parameters.nil?
        fail ArgumentError, "Missing the required parameter 'parameters' when calling MoneyInsApi.money_ins_card_register_post"
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling MoneyInsApi.money_ins_card_register_post"
      end
      # verify the required parameter 'psu_ip_address' is set
      if @api_client.config.client_side_validation && psu_ip_address.nil?
        fail ArgumentError, "Missing the required parameter 'psu_ip_address' when calling MoneyInsApi.money_ins_card_register_post"
      end
      # resource path
      local_var_path = '/v2/moneyins/card/register'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Authorization'] = authorization
      header_params[:'PSU-IP-Address'] = psu_ip_address
      header_params[:'PSU-Accept-Language'] = opts[:'psu_accept_language'] if !opts[:'psu_accept_language'].nil?
      header_params[:'PSU-User-Agent'] = opts[:'psu_user_agent'] if !opts[:'psu_user_agent'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(parameters)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RegisterCardOutput')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MoneyInsApi#money_ins_card_register_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Payment account credited with monthly subscription by card
    # This function allow partner to subscribe to monthly rebill operation. <br />  1. The WHITE BRAND communicate to lemonway which is the date of the month they wish to make the monthly rebill.  2. LemonWay will initialize the subscription by creating the count pending transactions with different execution dates (monthly).  3. On the execution date, LemonWay will debit (rebill) the card, switch the pending transaction to success and notify the WHITE BRAND.
    # @param cardid 
    # @param parameters 
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [MoneyInSubscriptionInitOutput]
    def money_ins_card_subscription_post(cardid, parameters, authorization, psu_ip_address, opts = {})
      data, _status_code, _headers = money_ins_card_subscription_post_with_http_info(cardid, parameters, authorization, psu_ip_address, opts)
      data
    end

    # Payment account credited with monthly subscription by card
    # This function allow partner to subscribe to monthly rebill operation. &lt;br /&gt;  1. The WHITE BRAND communicate to lemonway which is the date of the month they wish to make the monthly rebill.  2. LemonWay will initialize the subscription by creating the count pending transactions with different execution dates (monthly).  3. On the execution date, LemonWay will debit (rebill) the card, switch the pending transaction to success and notify the WHITE BRAND.
    # @param cardid 
    # @param parameters 
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [Array<(MoneyInSubscriptionInitOutput, Fixnum, Hash)>] MoneyInSubscriptionInitOutput data, response status code and response headers
    def money_ins_card_subscription_post_with_http_info(cardid, parameters, authorization, psu_ip_address, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MoneyInsApi.money_ins_card_subscription_post ...'
      end
      # verify the required parameter 'cardid' is set
      if @api_client.config.client_side_validation && cardid.nil?
        fail ArgumentError, "Missing the required parameter 'cardid' when calling MoneyInsApi.money_ins_card_subscription_post"
      end
      # verify the required parameter 'parameters' is set
      if @api_client.config.client_side_validation && parameters.nil?
        fail ArgumentError, "Missing the required parameter 'parameters' when calling MoneyInsApi.money_ins_card_subscription_post"
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling MoneyInsApi.money_ins_card_subscription_post"
      end
      # verify the required parameter 'psu_ip_address' is set
      if @api_client.config.client_side_validation && psu_ip_address.nil?
        fail ArgumentError, "Missing the required parameter 'psu_ip_address' when calling MoneyInsApi.money_ins_card_subscription_post"
      end
      # resource path
      local_var_path = '/v2/moneyins/card/{cardid}/subscription'.sub('{' + 'cardid' + '}', cardid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Authorization'] = authorization
      header_params[:'PSU-IP-Address'] = psu_ip_address
      header_params[:'PSU-Accept-Language'] = opts[:'psu_accept_language'] if !opts[:'psu_accept_language'].nil?
      header_params[:'PSU-User-Agent'] = opts[:'psu_user_agent'] if !opts[:'psu_user_agent'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(parameters)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MoneyInSubscriptionInitOutput')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MoneyInsApi#money_ins_card_subscription_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Unregister a card token
    # This method breaks the link between a card and a payment account.
    # @param cardid 
    # @param parameters 
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [UnregisterCardOutput]
    def money_ins_card_unregister_put(cardid, parameters, authorization, psu_ip_address, opts = {})
      data, _status_code, _headers = money_ins_card_unregister_put_with_http_info(cardid, parameters, authorization, psu_ip_address, opts)
      data
    end

    # Unregister a card token
    # This method breaks the link between a card and a payment account.
    # @param cardid 
    # @param parameters 
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [Array<(UnregisterCardOutput, Fixnum, Hash)>] UnregisterCardOutput data, response status code and response headers
    def money_ins_card_unregister_put_with_http_info(cardid, parameters, authorization, psu_ip_address, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MoneyInsApi.money_ins_card_unregister_put ...'
      end
      # verify the required parameter 'cardid' is set
      if @api_client.config.client_side_validation && cardid.nil?
        fail ArgumentError, "Missing the required parameter 'cardid' when calling MoneyInsApi.money_ins_card_unregister_put"
      end
      # verify the required parameter 'parameters' is set
      if @api_client.config.client_side_validation && parameters.nil?
        fail ArgumentError, "Missing the required parameter 'parameters' when calling MoneyInsApi.money_ins_card_unregister_put"
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling MoneyInsApi.money_ins_card_unregister_put"
      end
      # verify the required parameter 'psu_ip_address' is set
      if @api_client.config.client_side_validation && psu_ip_address.nil?
        fail ArgumentError, "Missing the required parameter 'psu_ip_address' when calling MoneyInsApi.money_ins_card_unregister_put"
      end
      # resource path
      local_var_path = '/v2/moneyins/card/{cardid}/unregister'.sub('{' + 'cardid' + '}', cardid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Authorization'] = authorization
      header_params[:'PSU-IP-Address'] = psu_ip_address
      header_params[:'PSU-Accept-Language'] = opts[:'psu_accept_language'] if !opts[:'psu_accept_language'].nil?
      header_params[:'PSU-User-Agent'] = opts[:'psu_user_agent'] if !opts[:'psu_user_agent'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(parameters)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UnregisterCardOutput')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MoneyInsApi#money_ins_card_unregister_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Indirect mode MONEY-IN by card crediting a payment account
    # This functionality enables the WHITE BRAND to use our card payment web pages.<br />  On request, it is possible to setup the payment page so that all payments will be differed and will have to be validated(by calling MoneyInValidate within 6 days).  This functionality enables the WHITE BRAND to use our card payment web pages.<br />  1. The WHITE BRAND calls this function to create a MoneyInToken<br />  2. The end-user will be redirected to the payment page<br />  3. The WHITE BRAND will need 3 integration points to handle the payment result:<br /><ul><li>returnUrl in case of success</li><li>cancelUrl in case of cancellation</li><li>errorUrl in case of error</li></ul>  These 3 URLs must be public accessible so your end-user, and our WEBKIT server could send requests to them.<br />  Next step: redirect end-user to the payment page <br />  Once you got the token of the transaction. You will redirect your client to the payment page<br />  In most case, you will have to combine the Token and the WEBKIT URL to get the payment page URL<br />  For example: https://sandbox-webkit.lemonway.fr/YOUR_COMPANY/dev/?moneyintoken=1wGaBwkdOmOxWT0s4t1Z1364815  You should find the URL of the WEBKIT in the onboarding email.
    # @param parameters 
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [MoneyInWebInitOutput]
    def money_ins_card_web_init_post(parameters, authorization, psu_ip_address, opts = {})
      data, _status_code, _headers = money_ins_card_web_init_post_with_http_info(parameters, authorization, psu_ip_address, opts)
      data
    end

    # Indirect mode MONEY-IN by card crediting a payment account
    # This functionality enables the WHITE BRAND to use our card payment web pages.&lt;br /&gt;  On request, it is possible to setup the payment page so that all payments will be differed and will have to be validated(by calling MoneyInValidate within 6 days).  This functionality enables the WHITE BRAND to use our card payment web pages.&lt;br /&gt;  1. The WHITE BRAND calls this function to create a MoneyInToken&lt;br /&gt;  2. The end-user will be redirected to the payment page&lt;br /&gt;  3. The WHITE BRAND will need 3 integration points to handle the payment result:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;returnUrl in case of success&lt;/li&gt;&lt;li&gt;cancelUrl in case of cancellation&lt;/li&gt;&lt;li&gt;errorUrl in case of error&lt;/li&gt;&lt;/ul&gt;  These 3 URLs must be public accessible so your end-user, and our WEBKIT server could send requests to them.&lt;br /&gt;  Next step: redirect end-user to the payment page &lt;br /&gt;  Once you got the token of the transaction. You will redirect your client to the payment page&lt;br /&gt;  In most case, you will have to combine the Token and the WEBKIT URL to get the payment page URL&lt;br /&gt;  For example: https://sandbox-webkit.lemonway.fr/YOUR_COMPANY/dev/?moneyintoken&#x3D;1wGaBwkdOmOxWT0s4t1Z1364815  You should find the URL of the WEBKIT in the onboarding email.
    # @param parameters 
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [Array<(MoneyInWebInitOutput, Fixnum, Hash)>] MoneyInWebInitOutput data, response status code and response headers
    def money_ins_card_web_init_post_with_http_info(parameters, authorization, psu_ip_address, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MoneyInsApi.money_ins_card_web_init_post ...'
      end
      # verify the required parameter 'parameters' is set
      if @api_client.config.client_side_validation && parameters.nil?
        fail ArgumentError, "Missing the required parameter 'parameters' when calling MoneyInsApi.money_ins_card_web_init_post"
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling MoneyInsApi.money_ins_card_web_init_post"
      end
      # verify the required parameter 'psu_ip_address' is set
      if @api_client.config.client_side_validation && psu_ip_address.nil?
        fail ArgumentError, "Missing the required parameter 'psu_ip_address' when calling MoneyInsApi.money_ins_card_web_init_post"
      end
      # resource path
      local_var_path = '/v2/moneyins/card/webinit'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Authorization'] = authorization
      header_params[:'PSU-IP-Address'] = psu_ip_address
      header_params[:'PSU-Accept-Language'] = opts[:'psu_accept_language'] if !opts[:'psu_accept_language'].nil?
      header_params[:'PSU-User-Agent'] = opts[:'psu_user_agent'] if !opts[:'psu_user_agent'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(parameters)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MoneyInWebInitOutput')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MoneyInsApi#money_ins_card_web_init_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Search for MONEY-IN by cheque since a date
    # Use GetMoneyInChequeStatus to obtain the list of all MONEY-IN by cheque (received by Lemon Way), starting from an entry date given in input to this method.
    # @param update_date UTC Unix timestamp.
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :cheque_type Cheque payment (by default) or Pagaré.  15 &#x3D; Cheque payment.  23 &#x3D; Pagaré.
    # @option opts [Integer] :page index start from 1, let null to get all
    # @option opts [Integer] :limit default 20, let it null if no pagination
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [GetMoneyInChequeDetailsOutput]
    def money_ins_cheque_get(update_date, authorization, psu_ip_address, opts = {})
      data, _status_code, _headers = money_ins_cheque_get_with_http_info(update_date, authorization, psu_ip_address, opts)
      data
    end

    # Search for MONEY-IN by cheque since a date
    # Use GetMoneyInChequeStatus to obtain the list of all MONEY-IN by cheque (received by Lemon Way), starting from an entry date given in input to this method.
    # @param update_date UTC Unix timestamp.
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :cheque_type Cheque payment (by default) or Pagaré.  15 &#x3D; Cheque payment.  23 &#x3D; Pagaré.
    # @option opts [Integer] :page index start from 1, let null to get all
    # @option opts [Integer] :limit default 20, let it null if no pagination
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [Array<(GetMoneyInChequeDetailsOutput, Fixnum, Hash)>] GetMoneyInChequeDetailsOutput data, response status code and response headers
    def money_ins_cheque_get_with_http_info(update_date, authorization, psu_ip_address, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MoneyInsApi.money_ins_cheque_get ...'
      end
      # verify the required parameter 'update_date' is set
      if @api_client.config.client_side_validation && update_date.nil?
        fail ArgumentError, "Missing the required parameter 'update_date' when calling MoneyInsApi.money_ins_cheque_get"
      end
      if @api_client.config.client_side_validation && update_date !~ Regexp.new(/^-?\\d{1,12}$/)
        fail ArgumentError, "invalid value for 'update_date' when calling MoneyInsApi.money_ins_cheque_get, must conform to the pattern /^-?\\d{1,12}$/."
      end

      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling MoneyInsApi.money_ins_cheque_get"
      end
      # verify the required parameter 'psu_ip_address' is set
      if @api_client.config.client_side_validation && psu_ip_address.nil?
        fail ArgumentError, "Missing the required parameter 'psu_ip_address' when calling MoneyInsApi.money_ins_cheque_get"
      end
      if @api_client.config.client_side_validation && opts[:'cheque_type'] && !['15', '23'].include?(opts[:'cheque_type'])
        fail ArgumentError, 'invalid value for "cheque_type", must be one of 15, 23'
      end
      # resource path
      local_var_path = '/v2/moneyins/cheque'

      # query parameters
      query_params = {}
      query_params[:'updateDate'] = update_date
      query_params[:'chequeType'] = opts[:'cheque_type'] if !opts[:'cheque_type'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Authorization'] = authorization
      header_params[:'PSU-IP-Address'] = psu_ip_address
      header_params[:'PSU-Accept-Language'] = opts[:'psu_accept_language'] if !opts[:'psu_accept_language'].nil?
      header_params[:'PSU-User-Agent'] = opts[:'psu_user_agent'] if !opts[:'psu_user_agent'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetMoneyInChequeDetailsOutput')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MoneyInsApi#money_ins_cheque_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Register a money-in by cheque
    # Please observe the following rules:  If you want to pre-enter the cheques in our system, use the MoneyInChequeInit function <br />  The cheque must be made out to Lemon Way<br />  On the back of the cheque, please enter a code to facilitate reconciliation.It will be of the following form: XXXXX-YYYYYYYYYY <br /><ul><li>\"XXXXX: code identifying the white label, as indicated in your production configuration form </li><li>-: a separation dash:</li><li>YYYYYYYYY : external identifier of your user's payment account </li></ul>  The holder of the cheque must be identical to that of the payment account to be credited <br />
    # @param parameters 
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [MoneyInChequeInitOutput]
    def money_ins_cheque_init_post(parameters, authorization, psu_ip_address, opts = {})
      data, _status_code, _headers = money_ins_cheque_init_post_with_http_info(parameters, authorization, psu_ip_address, opts)
      data
    end

    # Register a money-in by cheque
    # Please observe the following rules:  If you want to pre-enter the cheques in our system, use the MoneyInChequeInit function &lt;br /&gt;  The cheque must be made out to Lemon Way&lt;br /&gt;  On the back of the cheque, please enter a code to facilitate reconciliation.It will be of the following form: XXXXX-YYYYYYYYYY &lt;br /&gt;&lt;ul&gt;&lt;li&gt;\&quot;XXXXX: code identifying the white label, as indicated in your production configuration form &lt;/li&gt;&lt;li&gt;-: a separation dash:&lt;/li&gt;&lt;li&gt;YYYYYYYYY : external identifier of your user&#39;s payment account &lt;/li&gt;&lt;/ul&gt;  The holder of the cheque must be identical to that of the payment account to be credited &lt;br /&gt;
    # @param parameters 
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [Array<(MoneyInChequeInitOutput, Fixnum, Hash)>] MoneyInChequeInitOutput data, response status code and response headers
    def money_ins_cheque_init_post_with_http_info(parameters, authorization, psu_ip_address, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MoneyInsApi.money_ins_cheque_init_post ...'
      end
      # verify the required parameter 'parameters' is set
      if @api_client.config.client_side_validation && parameters.nil?
        fail ArgumentError, "Missing the required parameter 'parameters' when calling MoneyInsApi.money_ins_cheque_init_post"
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling MoneyInsApi.money_ins_cheque_init_post"
      end
      # verify the required parameter 'psu_ip_address' is set
      if @api_client.config.client_side_validation && psu_ip_address.nil?
        fail ArgumentError, "Missing the required parameter 'psu_ip_address' when calling MoneyInsApi.money_ins_cheque_init_post"
      end
      # resource path
      local_var_path = '/v2/moneyins/cheque/init'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Authorization'] = authorization
      header_params[:'PSU-IP-Address'] = psu_ip_address
      header_params[:'PSU-Accept-Language'] = opts[:'psu_accept_language'] if !opts[:'psu_accept_language'].nil?
      header_params[:'PSU-User-Agent'] = opts[:'psu_user_agent'] if !opts[:'psu_user_agent'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(parameters)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MoneyInChequeInitOutput')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MoneyInsApi#money_ins_cheque_init_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Credit a account with a 3D Secure card payment
    # This method is more complex that non 3D Secure payment, but 3D Secure will secure your business.<br /><br />  You will need 3 integration points: <br />  1. Your server calls MoneyIn3DInit from DIRECTKIT to initialize MONEY-IN of the wallet: Wallet ID, amount, card data. LEMON WAY returns information to redirect your CLIENT on his 3DSecure bank web page, and the ID of the transaction that will be needed to finalize the payment.  2. Your server redirects the CLIENT to the 3D Secure authentication page. The transaction will expire 15 minutes after the MoneyIn3DInit call.  3. Your server waits for return of the CLIENT from the 3D Secure, and then calls MoneyIn3DConfirm from DIRECTKIT to ask the debit of the card.
    # @param parameters 
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [MoneyIn3DInitOutput]
    def money_ins_direct3_d_init_post(parameters, authorization, psu_ip_address, opts = {})
      data, _status_code, _headers = money_ins_direct3_d_init_post_with_http_info(parameters, authorization, psu_ip_address, opts)
      data
    end

    # Credit a account with a 3D Secure card payment
    # This method is more complex that non 3D Secure payment, but 3D Secure will secure your business.&lt;br /&gt;&lt;br /&gt;  You will need 3 integration points: &lt;br /&gt;  1. Your server calls MoneyIn3DInit from DIRECTKIT to initialize MONEY-IN of the wallet: Wallet ID, amount, card data. LEMON WAY returns information to redirect your CLIENT on his 3DSecure bank web page, and the ID of the transaction that will be needed to finalize the payment.  2. Your server redirects the CLIENT to the 3D Secure authentication page. The transaction will expire 15 minutes after the MoneyIn3DInit call.  3. Your server waits for return of the CLIENT from the 3D Secure, and then calls MoneyIn3DConfirm from DIRECTKIT to ask the debit of the card.
    # @param parameters 
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [Array<(MoneyIn3DInitOutput, Fixnum, Hash)>] MoneyIn3DInitOutput data, response status code and response headers
    def money_ins_direct3_d_init_post_with_http_info(parameters, authorization, psu_ip_address, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MoneyInsApi.money_ins_direct3_d_init_post ...'
      end
      # verify the required parameter 'parameters' is set
      if @api_client.config.client_side_validation && parameters.nil?
        fail ArgumentError, "Missing the required parameter 'parameters' when calling MoneyInsApi.money_ins_direct3_d_init_post"
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling MoneyInsApi.money_ins_direct3_d_init_post"
      end
      # verify the required parameter 'psu_ip_address' is set
      if @api_client.config.client_side_validation && psu_ip_address.nil?
        fail ArgumentError, "Missing the required parameter 'psu_ip_address' when calling MoneyInsApi.money_ins_direct3_d_init_post"
      end
      # resource path
      local_var_path = '/v2/moneyins/card/direct/3dinit'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Authorization'] = authorization
      header_params[:'PSU-IP-Address'] = psu_ip_address
      header_params[:'PSU-Accept-Language'] = opts[:'psu_accept_language'] if !opts[:'psu_accept_language'].nil?
      header_params[:'PSU-User-Agent'] = opts[:'psu_user_agent'] if !opts[:'psu_user_agent'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(parameters)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MoneyIn3DInitOutput')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MoneyInsApi#money_ins_direct3_d_init_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Finalization of the iDeal payment
    # This method finalizes the credit of a payment account by iDeal, after the user has returned to your website.<br />              You can only finalize the operation once.
    # @param transactionid 
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [MoneyInIDealConfirmOutput]
    def money_ins_i_deal_confirm_put(transactionid, authorization, psu_ip_address, opts = {})
      data, _status_code, _headers = money_ins_i_deal_confirm_put_with_http_info(transactionid, authorization, psu_ip_address, opts)
      data
    end

    # Finalization of the iDeal payment
    # This method finalizes the credit of a payment account by iDeal, after the user has returned to your website.&lt;br /&gt;              You can only finalize the operation once.
    # @param transactionid 
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [Array<(MoneyInIDealConfirmOutput, Fixnum, Hash)>] MoneyInIDealConfirmOutput data, response status code and response headers
    def money_ins_i_deal_confirm_put_with_http_info(transactionid, authorization, psu_ip_address, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MoneyInsApi.money_ins_i_deal_confirm_put ...'
      end
      # verify the required parameter 'transactionid' is set
      if @api_client.config.client_side_validation && transactionid.nil?
        fail ArgumentError, "Missing the required parameter 'transactionid' when calling MoneyInsApi.money_ins_i_deal_confirm_put"
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling MoneyInsApi.money_ins_i_deal_confirm_put"
      end
      # verify the required parameter 'psu_ip_address' is set
      if @api_client.config.client_side_validation && psu_ip_address.nil?
        fail ArgumentError, "Missing the required parameter 'psu_ip_address' when calling MoneyInsApi.money_ins_i_deal_confirm_put"
      end
      # resource path
      local_var_path = '/v2/moneyins/ideal/{transactionid}/confirm'.sub('{' + 'transactionid' + '}', transactionid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Authorization'] = authorization
      header_params[:'PSU-IP-Address'] = psu_ip_address
      header_params[:'PSU-Accept-Language'] = opts[:'psu_accept_language'] if !opts[:'psu_accept_language'].nil?
      header_params[:'PSU-User-Agent'] = opts[:'psu_user_agent'] if !opts[:'psu_user_agent'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MoneyInIDealConfirmOutput')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MoneyInsApi#money_ins_i_deal_confirm_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Initialize iDeal payment
    # You will need 3 integration points on your code:  <ul><li>One call to DIRECTKIT to init iDeal payment to credit the payment account</li><li>One redirection from your WHITE BRAND web site to the return URL by IDealInit</li><li>One call to DIRECTKIT to finalize the iDeal payment</li></ul>
    # @param parameters 
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [MoneyInIDealInitOutput]
    def money_ins_i_deal_init_post(parameters, authorization, psu_ip_address, opts = {})
      data, _status_code, _headers = money_ins_i_deal_init_post_with_http_info(parameters, authorization, psu_ip_address, opts)
      data
    end

    # Initialize iDeal payment
    # You will need 3 integration points on your code:  &lt;ul&gt;&lt;li&gt;One call to DIRECTKIT to init iDeal payment to credit the payment account&lt;/li&gt;&lt;li&gt;One redirection from your WHITE BRAND web site to the return URL by IDealInit&lt;/li&gt;&lt;li&gt;One call to DIRECTKIT to finalize the iDeal payment&lt;/li&gt;&lt;/ul&gt;
    # @param parameters 
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [Array<(MoneyInIDealInitOutput, Fixnum, Hash)>] MoneyInIDealInitOutput data, response status code and response headers
    def money_ins_i_deal_init_post_with_http_info(parameters, authorization, psu_ip_address, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MoneyInsApi.money_ins_i_deal_init_post ...'
      end
      # verify the required parameter 'parameters' is set
      if @api_client.config.client_side_validation && parameters.nil?
        fail ArgumentError, "Missing the required parameter 'parameters' when calling MoneyInsApi.money_ins_i_deal_init_post"
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling MoneyInsApi.money_ins_i_deal_init_post"
      end
      # verify the required parameter 'psu_ip_address' is set
      if @api_client.config.client_side_validation && psu_ip_address.nil?
        fail ArgumentError, "Missing the required parameter 'psu_ip_address' when calling MoneyInsApi.money_ins_i_deal_init_post"
      end
      # resource path
      local_var_path = '/v2/moneyins/ideal/init'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Authorization'] = authorization
      header_params[:'PSU-IP-Address'] = psu_ip_address
      header_params[:'PSU-Accept-Language'] = opts[:'psu_accept_language'] if !opts[:'psu_accept_language'].nil?
      header_params[:'PSU-User-Agent'] = opts[:'psu_user_agent'] if !opts[:'psu_user_agent'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(parameters)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MoneyInIDealInitOutput')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MoneyInsApi#money_ins_i_deal_init_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the mandate(s) associate to a payment account
    # @param accountid Account ID
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [AccountMandatsOutput]
    def money_ins_mandate_get(accountid, authorization, psu_ip_address, opts = {})
      data, _status_code, _headers = money_ins_mandate_get_with_http_info(accountid, authorization, psu_ip_address, opts)
      data
    end

    # Get the mandate(s) associate to a payment account
    # @param accountid Account ID
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [Array<(AccountMandatsOutput, Fixnum, Hash)>] AccountMandatsOutput data, response status code and response headers
    def money_ins_mandate_get_with_http_info(accountid, authorization, psu_ip_address, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MoneyInsApi.money_ins_mandate_get ...'
      end
      # verify the required parameter 'accountid' is set
      if @api_client.config.client_side_validation && accountid.nil?
        fail ArgumentError, "Missing the required parameter 'accountid' when calling MoneyInsApi.money_ins_mandate_get"
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling MoneyInsApi.money_ins_mandate_get"
      end
      # verify the required parameter 'psu_ip_address' is set
      if @api_client.config.client_side_validation && psu_ip_address.nil?
        fail ArgumentError, "Missing the required parameter 'psu_ip_address' when calling MoneyInsApi.money_ins_mandate_get"
      end
      # resource path
      local_var_path = '/v2/moneyins/{accountid}/mandate'.sub('{' + 'accountid' + '}', accountid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Authorization'] = authorization
      header_params[:'PSU-IP-Address'] = psu_ip_address
      header_params[:'PSU-Accept-Language'] = opts[:'psu_accept_language'] if !opts[:'psu_accept_language'].nil?
      header_params[:'PSU-User-Agent'] = opts[:'psu_user_agent'] if !opts[:'psu_user_agent'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AccountMandatsOutput')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MoneyInsApi#money_ins_mandate_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Initialize MB WAY payment
    # Payment process :  <ul><li>the WHITE BRAND call DIRECTKIT API, provide a phone number to initialize the payment</li><li>the payment order is sent to the customer's smartphone</li><li>the customer pays with his smartphone</li><li>the WHITE BRAND will be notified after the payment is settled</li></ul>
    # @param parameters 
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [MoneyInMbwayInitOutput]
    def money_ins_mbway_init_post(parameters, authorization, psu_ip_address, opts = {})
      data, _status_code, _headers = money_ins_mbway_init_post_with_http_info(parameters, authorization, psu_ip_address, opts)
      data
    end

    # Initialize MB WAY payment
    # Payment process :  &lt;ul&gt;&lt;li&gt;the WHITE BRAND call DIRECTKIT API, provide a phone number to initialize the payment&lt;/li&gt;&lt;li&gt;the payment order is sent to the customer&#39;s smartphone&lt;/li&gt;&lt;li&gt;the customer pays with his smartphone&lt;/li&gt;&lt;li&gt;the WHITE BRAND will be notified after the payment is settled&lt;/li&gt;&lt;/ul&gt;
    # @param parameters 
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [Array<(MoneyInMbwayInitOutput, Fixnum, Hash)>] MoneyInMbwayInitOutput data, response status code and response headers
    def money_ins_mbway_init_post_with_http_info(parameters, authorization, psu_ip_address, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MoneyInsApi.money_ins_mbway_init_post ...'
      end
      # verify the required parameter 'parameters' is set
      if @api_client.config.client_side_validation && parameters.nil?
        fail ArgumentError, "Missing the required parameter 'parameters' when calling MoneyInsApi.money_ins_mbway_init_post"
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling MoneyInsApi.money_ins_mbway_init_post"
      end
      # verify the required parameter 'psu_ip_address' is set
      if @api_client.config.client_side_validation && psu_ip_address.nil?
        fail ArgumentError, "Missing the required parameter 'psu_ip_address' when calling MoneyInsApi.money_ins_mbway_init_post"
      end
      # resource path
      local_var_path = '/v2/moneyins/mbway/init'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Authorization'] = authorization
      header_params[:'PSU-IP-Address'] = psu_ip_address
      header_params[:'PSU-Accept-Language'] = opts[:'psu_accept_language'] if !opts[:'psu_accept_language'].nil?
      header_params[:'PSU-User-Agent'] = opts[:'psu_user_agent'] if !opts[:'psu_user_agent'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(parameters)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MoneyInMbwayInitOutput')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MoneyInsApi#money_ins_mbway_init_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Initialize MobilePay payment
    # You will need 2 integration points on your code:  <ul><li>One call to DIRECTKIT to init MobilePay payment to credit the payment account</li><li>One redirection from your WHITE BRAND web site to the return URL by MobilePay</li></ul>
    # @param parameters 
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [MoneyInMobilePayInitOutput]
    def money_ins_mobile_pay_init_post(parameters, authorization, psu_ip_address, opts = {})
      data, _status_code, _headers = money_ins_mobile_pay_init_post_with_http_info(parameters, authorization, psu_ip_address, opts)
      data
    end

    # Initialize MobilePay payment
    # You will need 2 integration points on your code:  &lt;ul&gt;&lt;li&gt;One call to DIRECTKIT to init MobilePay payment to credit the payment account&lt;/li&gt;&lt;li&gt;One redirection from your WHITE BRAND web site to the return URL by MobilePay&lt;/li&gt;&lt;/ul&gt;
    # @param parameters 
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [Array<(MoneyInMobilePayInitOutput, Fixnum, Hash)>] MoneyInMobilePayInitOutput data, response status code and response headers
    def money_ins_mobile_pay_init_post_with_http_info(parameters, authorization, psu_ip_address, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MoneyInsApi.money_ins_mobile_pay_init_post ...'
      end
      # verify the required parameter 'parameters' is set
      if @api_client.config.client_side_validation && parameters.nil?
        fail ArgumentError, "Missing the required parameter 'parameters' when calling MoneyInsApi.money_ins_mobile_pay_init_post"
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling MoneyInsApi.money_ins_mobile_pay_init_post"
      end
      # verify the required parameter 'psu_ip_address' is set
      if @api_client.config.client_side_validation && psu_ip_address.nil?
        fail ArgumentError, "Missing the required parameter 'psu_ip_address' when calling MoneyInsApi.money_ins_mobile_pay_init_post"
      end
      # resource path
      local_var_path = '/v2/moneyins/mobilePay/init'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Authorization'] = authorization
      header_params[:'PSU-IP-Address'] = psu_ip_address
      header_params[:'PSU-Accept-Language'] = opts[:'psu_accept_language'] if !opts[:'psu_accept_language'].nil?
      header_params[:'PSU-User-Agent'] = opts[:'psu_user_agent'] if !opts[:'psu_user_agent'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(parameters)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MoneyInMobilePayInitOutput')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MoneyInsApi#money_ins_mobile_pay_init_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get MoneyIn
    # Use \"GetMoneyInTransDetails\" to check and get details about a MONEY-IN that was done.
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :transaction_id MONEY-IN ID.
    # @option opts [String] :transaction_comment MONEY-IN Comment.
    # @option opts [String] :transaction_merchant_token Token from wkToken variable.
    # @option opts [String] :start_date UTC Unix timestamp, in order to return transactions initialized after it.
    # @option opts [String] :end_date UTC Unix timestamp, in order to return transactions initialized before it.
    # @option opts [Integer] :page index start from 1, let null to get all
    # @option opts [Integer] :limit default 20, let it null if no pagination
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [GetMoneyInTransDetailsOutput]
    def money_ins_money_in_get(authorization, psu_ip_address, opts = {})
      data, _status_code, _headers = money_ins_money_in_get_with_http_info(authorization, psu_ip_address, opts)
      data
    end

    # Get MoneyIn
    # Use \&quot;GetMoneyInTransDetails\&quot; to check and get details about a MONEY-IN that was done.
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :transaction_id MONEY-IN ID.
    # @option opts [String] :transaction_comment MONEY-IN Comment.
    # @option opts [String] :transaction_merchant_token Token from wkToken variable.
    # @option opts [String] :start_date UTC Unix timestamp, in order to return transactions initialized after it.
    # @option opts [String] :end_date UTC Unix timestamp, in order to return transactions initialized before it.
    # @option opts [Integer] :page index start from 1, let null to get all
    # @option opts [Integer] :limit default 20, let it null if no pagination
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [Array<(GetMoneyInTransDetailsOutput, Fixnum, Hash)>] GetMoneyInTransDetailsOutput data, response status code and response headers
    def money_ins_money_in_get_with_http_info(authorization, psu_ip_address, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MoneyInsApi.money_ins_money_in_get ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling MoneyInsApi.money_ins_money_in_get"
      end
      # verify the required parameter 'psu_ip_address' is set
      if @api_client.config.client_side_validation && psu_ip_address.nil?
        fail ArgumentError, "Missing the required parameter 'psu_ip_address' when calling MoneyInsApi.money_ins_money_in_get"
      end
      if @api_client.config.client_side_validation && !opts[:'transaction_comment'].nil? && opts[:'transaction_comment'].to_s.length > 140
        fail ArgumentError, 'invalid value for "opts[:"transaction_comment"]" when calling MoneyInsApi.money_ins_money_in_get, the character length must be smaller than or equal to 140.'
      end

      if @api_client.config.client_side_validation && !opts[:'transaction_comment'].nil? && opts[:'transaction_comment'].to_s.length < 0
        fail ArgumentError, 'invalid value for "opts[:"transaction_comment"]" when calling MoneyInsApi.money_ins_money_in_get, the character length must be great than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'transaction_merchant_token'].nil? && opts[:'transaction_merchant_token'].to_s.length > 50
        fail ArgumentError, 'invalid value for "opts[:"transaction_merchant_token"]" when calling MoneyInsApi.money_ins_money_in_get, the character length must be smaller than or equal to 50.'
      end

      if @api_client.config.client_side_validation && !opts[:'transaction_merchant_token'].nil? && opts[:'transaction_merchant_token'].to_s.length < 0
        fail ArgumentError, 'invalid value for "opts[:"transaction_merchant_token"]" when calling MoneyInsApi.money_ins_money_in_get, the character length must be great than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'start_date'].nil? && opts[:'start_date'] !~ Regexp.new(/^-?\\d{1,12}$/)
        fail ArgumentError, "invalid value for 'opts[:\"start_date\"]' when calling MoneyInsApi.money_ins_money_in_get, must conform to the pattern /^-?\\d{1,12}$/."
      end

      if @api_client.config.client_side_validation && !opts[:'end_date'].nil? && opts[:'end_date'] !~ Regexp.new(/^-?\\d{1,12}$/)
        fail ArgumentError, "invalid value for 'opts[:\"end_date\"]' when calling MoneyInsApi.money_ins_money_in_get, must conform to the pattern /^-?\\d{1,12}$/."
      end

      # resource path
      local_var_path = '/v2/moneyins'

      # query parameters
      query_params = {}
      query_params[:'transactionId'] = opts[:'transaction_id'] if !opts[:'transaction_id'].nil?
      query_params[:'transactionComment'] = opts[:'transaction_comment'] if !opts[:'transaction_comment'].nil?
      query_params[:'transactionMerchantToken'] = opts[:'transaction_merchant_token'] if !opts[:'transaction_merchant_token'].nil?
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Authorization'] = authorization
      header_params[:'PSU-IP-Address'] = psu_ip_address
      header_params[:'PSU-Accept-Language'] = opts[:'psu_accept_language'] if !opts[:'psu_accept_language'].nil?
      header_params[:'PSU-User-Agent'] = opts[:'psu_user_agent'] if !opts[:'psu_user_agent'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetMoneyInTransDetailsOutput')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MoneyInsApi#money_ins_money_in_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Initialize Multibanco payment
    # Payment process :  <ul><li>the WHITE BRAND calls DIRECTKIT API to initialize the credit transaction of a payment account and get a payment reference</li><li>the WHITE BRAND gives the payment reference to the final customer</li><li>the customer uses the reference to pay on an ATM</li><li>the WHITE BRAND will be notified after the payment is settled</li></ul>
    # @param parameters 
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [MoneyInMultibancoInitOutput]
    def money_ins_multibanco_init_post(parameters, authorization, psu_ip_address, opts = {})
      data, _status_code, _headers = money_ins_multibanco_init_post_with_http_info(parameters, authorization, psu_ip_address, opts)
      data
    end

    # Initialize Multibanco payment
    # Payment process :  &lt;ul&gt;&lt;li&gt;the WHITE BRAND calls DIRECTKIT API to initialize the credit transaction of a payment account and get a payment reference&lt;/li&gt;&lt;li&gt;the WHITE BRAND gives the payment reference to the final customer&lt;/li&gt;&lt;li&gt;the customer uses the reference to pay on an ATM&lt;/li&gt;&lt;li&gt;the WHITE BRAND will be notified after the payment is settled&lt;/li&gt;&lt;/ul&gt;
    # @param parameters 
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [Array<(MoneyInMultibancoInitOutput, Fixnum, Hash)>] MoneyInMultibancoInitOutput data, response status code and response headers
    def money_ins_multibanco_init_post_with_http_info(parameters, authorization, psu_ip_address, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MoneyInsApi.money_ins_multibanco_init_post ...'
      end
      # verify the required parameter 'parameters' is set
      if @api_client.config.client_side_validation && parameters.nil?
        fail ArgumentError, "Missing the required parameter 'parameters' when calling MoneyInsApi.money_ins_multibanco_init_post"
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling MoneyInsApi.money_ins_multibanco_init_post"
      end
      # verify the required parameter 'psu_ip_address' is set
      if @api_client.config.client_side_validation && psu_ip_address.nil?
        fail ArgumentError, "Missing the required parameter 'psu_ip_address' when calling MoneyInsApi.money_ins_multibanco_init_post"
      end
      # resource path
      local_var_path = '/v2/moneyins/multibanco/init'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Authorization'] = authorization
      header_params[:'PSU-IP-Address'] = psu_ip_address
      header_params[:'PSU-Accept-Language'] = opts[:'psu_accept_language'] if !opts[:'psu_accept_language'].nil?
      header_params[:'PSU-User-Agent'] = opts[:'psu_user_agent'] if !opts[:'psu_user_agent'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(parameters)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MoneyInMultibancoInitOutput')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MoneyInsApi#money_ins_multibanco_init_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Initialize PayTrail payment
    # You will need 2 integration points on your code:  <ul><li>One call to DIRECTKIT to init PayTrail payment to credit the payment account</li><li>One redirection from your WHITE BRAND web site to the return URL by PayTrail</li></ul>
    # @param parameters 
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [MoneyInPayTrailInitOutput]
    def money_ins_pay_trail_init_post(parameters, authorization, psu_ip_address, opts = {})
      data, _status_code, _headers = money_ins_pay_trail_init_post_with_http_info(parameters, authorization, psu_ip_address, opts)
      data
    end

    # Initialize PayTrail payment
    # You will need 2 integration points on your code:  &lt;ul&gt;&lt;li&gt;One call to DIRECTKIT to init PayTrail payment to credit the payment account&lt;/li&gt;&lt;li&gt;One redirection from your WHITE BRAND web site to the return URL by PayTrail&lt;/li&gt;&lt;/ul&gt;
    # @param parameters 
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [Array<(MoneyInPayTrailInitOutput, Fixnum, Hash)>] MoneyInPayTrailInitOutput data, response status code and response headers
    def money_ins_pay_trail_init_post_with_http_info(parameters, authorization, psu_ip_address, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MoneyInsApi.money_ins_pay_trail_init_post ...'
      end
      # verify the required parameter 'parameters' is set
      if @api_client.config.client_side_validation && parameters.nil?
        fail ArgumentError, "Missing the required parameter 'parameters' when calling MoneyInsApi.money_ins_pay_trail_init_post"
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling MoneyInsApi.money_ins_pay_trail_init_post"
      end
      # verify the required parameter 'psu_ip_address' is set
      if @api_client.config.client_side_validation && psu_ip_address.nil?
        fail ArgumentError, "Missing the required parameter 'psu_ip_address' when calling MoneyInsApi.money_ins_pay_trail_init_post"
      end
      # resource path
      local_var_path = '/v2/moneyins/paytrail/init'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Authorization'] = authorization
      header_params[:'PSU-IP-Address'] = psu_ip_address
      header_params[:'PSU-Accept-Language'] = opts[:'psu_accept_language'] if !opts[:'psu_accept_language'].nil?
      header_params[:'PSU-User-Agent'] = opts[:'psu_user_agent'] if !opts[:'psu_user_agent'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(parameters)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MoneyInPayTrailInitOutput')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MoneyInsApi#money_ins_pay_trail_init_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get details of a completed payment form
    # This function allows you to retreive the status of a \"completed (or filled) payment form\" <br />  Scenario  <ul><li>Using the CreatePaymentForm function, you(WHITE BRAND) had generated a re-usable Payment Form(with the form Id is for example 579c7def4bb0411da294d9b57c2c1323)</li><li>Some clients filled the form and make payment.</li><li>Each time a client completes the form and click on the \"Accept and Pay\" button, LemonWay will store the completed form and generate a new id for it, for example 7e98be392a5e45f6bc357a9ab8c623d2</li><li>The initial status of the \"completed form\" is PENDING.When client finish the payment process, it will switch to PAID.It could also switch to CANCEL or ERROR..</li><li>In this example, the completed form 7e98.. was created from the parent form 579c..The form 579c.. is reusable, which means it can be completed several time by different clients, so it could have many completed version.This function allows you to retreive the status of a the filled form via its id (7e98..).</li></ul>
    # @param formid 
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [GetCompletedPaymentFormOutput]
    def money_ins_payment_form_completed_get(formid, authorization, psu_ip_address, opts = {})
      data, _status_code, _headers = money_ins_payment_form_completed_get_with_http_info(formid, authorization, psu_ip_address, opts)
      data
    end

    # Get details of a completed payment form
    # This function allows you to retreive the status of a \&quot;completed (or filled) payment form\&quot; &lt;br /&gt;  Scenario  &lt;ul&gt;&lt;li&gt;Using the CreatePaymentForm function, you(WHITE BRAND) had generated a re-usable Payment Form(with the form Id is for example 579c7def4bb0411da294d9b57c2c1323)&lt;/li&gt;&lt;li&gt;Some clients filled the form and make payment.&lt;/li&gt;&lt;li&gt;Each time a client completes the form and click on the \&quot;Accept and Pay\&quot; button, LemonWay will store the completed form and generate a new id for it, for example 7e98be392a5e45f6bc357a9ab8c623d2&lt;/li&gt;&lt;li&gt;The initial status of the \&quot;completed form\&quot; is PENDING.When client finish the payment process, it will switch to PAID.It could also switch to CANCEL or ERROR..&lt;/li&gt;&lt;li&gt;In this example, the completed form 7e98.. was created from the parent form 579c..The form 579c.. is reusable, which means it can be completed several time by different clients, so it could have many completed version.This function allows you to retreive the status of a the filled form via its id (7e98..).&lt;/li&gt;&lt;/ul&gt;
    # @param formid 
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [Array<(GetCompletedPaymentFormOutput, Fixnum, Hash)>] GetCompletedPaymentFormOutput data, response status code and response headers
    def money_ins_payment_form_completed_get_with_http_info(formid, authorization, psu_ip_address, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MoneyInsApi.money_ins_payment_form_completed_get ...'
      end
      # verify the required parameter 'formid' is set
      if @api_client.config.client_side_validation && formid.nil?
        fail ArgumentError, "Missing the required parameter 'formid' when calling MoneyInsApi.money_ins_payment_form_completed_get"
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling MoneyInsApi.money_ins_payment_form_completed_get"
      end
      # verify the required parameter 'psu_ip_address' is set
      if @api_client.config.client_side_validation && psu_ip_address.nil?
        fail ArgumentError, "Missing the required parameter 'psu_ip_address' when calling MoneyInsApi.money_ins_payment_form_completed_get"
      end
      # resource path
      local_var_path = '/v2/moneyins/paymentform/{formid}/completed'.sub('{' + 'formid' + '}', formid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Authorization'] = authorization
      header_params[:'PSU-IP-Address'] = psu_ip_address
      header_params[:'PSU-Accept-Language'] = opts[:'psu_accept_language'] if !opts[:'psu_accept_language'].nil?
      header_params[:'PSU-User-Agent'] = opts[:'psu_user_agent'] if !opts[:'psu_user_agent'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetCompletedPaymentFormOutput')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MoneyInsApi#money_ins_payment_form_completed_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Disable a payment form
    # Disable a payment form created by CreatePaymentForm.
    # @param formid 
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [DisablePaymentFormOutput]
    def money_ins_payment_form_disable_put(formid, authorization, psu_ip_address, opts = {})
      data, _status_code, _headers = money_ins_payment_form_disable_put_with_http_info(formid, authorization, psu_ip_address, opts)
      data
    end

    # Disable a payment form
    # Disable a payment form created by CreatePaymentForm.
    # @param formid 
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [Array<(DisablePaymentFormOutput, Fixnum, Hash)>] DisablePaymentFormOutput data, response status code and response headers
    def money_ins_payment_form_disable_put_with_http_info(formid, authorization, psu_ip_address, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MoneyInsApi.money_ins_payment_form_disable_put ...'
      end
      # verify the required parameter 'formid' is set
      if @api_client.config.client_side_validation && formid.nil?
        fail ArgumentError, "Missing the required parameter 'formid' when calling MoneyInsApi.money_ins_payment_form_disable_put"
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling MoneyInsApi.money_ins_payment_form_disable_put"
      end
      # verify the required parameter 'psu_ip_address' is set
      if @api_client.config.client_side_validation && psu_ip_address.nil?
        fail ArgumentError, "Missing the required parameter 'psu_ip_address' when calling MoneyInsApi.money_ins_payment_form_disable_put"
      end
      # resource path
      local_var_path = '/v2/moneyins/paymentform/{formid}/disable'.sub('{' + 'formid' + '}', formid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Authorization'] = authorization
      header_params[:'PSU-IP-Address'] = psu_ip_address
      header_params[:'PSU-Accept-Language'] = opts[:'psu_accept_language'] if !opts[:'psu_accept_language'].nil?
      header_params[:'PSU-User-Agent'] = opts[:'psu_user_agent'] if !opts[:'psu_user_agent'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DisablePaymentFormOutput')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MoneyInsApi#money_ins_payment_form_disable_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Initialize Payshop payment
    # Payment process  <ul><li>the WHITE BRAND call DIRECTKIT API to initialize the credit transaction of a payment account and get a payment reference</li><li>the WHITE BRAND gives the payment reference to the final customer</li><li>the customer uses the reference to pay in a shop</li><li>the WHITE BRAND will be notified after the payment is settled</li></ul>
    # @param parameters 
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [MoneyInPayshopInitOutput]
    def money_ins_payshop_init_post(parameters, authorization, psu_ip_address, opts = {})
      data, _status_code, _headers = money_ins_payshop_init_post_with_http_info(parameters, authorization, psu_ip_address, opts)
      data
    end

    # Initialize Payshop payment
    # Payment process  &lt;ul&gt;&lt;li&gt;the WHITE BRAND call DIRECTKIT API to initialize the credit transaction of a payment account and get a payment reference&lt;/li&gt;&lt;li&gt;the WHITE BRAND gives the payment reference to the final customer&lt;/li&gt;&lt;li&gt;the customer uses the reference to pay in a shop&lt;/li&gt;&lt;li&gt;the WHITE BRAND will be notified after the payment is settled&lt;/li&gt;&lt;/ul&gt;
    # @param parameters 
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [Array<(MoneyInPayshopInitOutput, Fixnum, Hash)>] MoneyInPayshopInitOutput data, response status code and response headers
    def money_ins_payshop_init_post_with_http_info(parameters, authorization, psu_ip_address, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MoneyInsApi.money_ins_payshop_init_post ...'
      end
      # verify the required parameter 'parameters' is set
      if @api_client.config.client_side_validation && parameters.nil?
        fail ArgumentError, "Missing the required parameter 'parameters' when calling MoneyInsApi.money_ins_payshop_init_post"
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling MoneyInsApi.money_ins_payshop_init_post"
      end
      # verify the required parameter 'psu_ip_address' is set
      if @api_client.config.client_side_validation && psu_ip_address.nil?
        fail ArgumentError, "Missing the required parameter 'psu_ip_address' when calling MoneyInsApi.money_ins_payshop_init_post"
      end
      # resource path
      local_var_path = '/v2/moneyins/payshop/init'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Authorization'] = authorization
      header_params[:'PSU-IP-Address'] = psu_ip_address
      header_params[:'PSU-Accept-Language'] = opts[:'psu_accept_language'] if !opts[:'psu_accept_language'].nil?
      header_params[:'PSU-User-Agent'] = opts[:'psu_user_agent'] if !opts[:'psu_user_agent'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(parameters)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MoneyInPayshopInitOutput')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MoneyInsApi#money_ins_payshop_init_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List of money-in by SDD
    # Returns the list of money-in by SDD which status has changed since the input date.
    # @param update_date UTC Unix timestamp.
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page index start from 1, let null to get all
    # @option opts [Integer] :limit default 20, let it null if no pagination
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [GetMoneyInSddOutput]
    def money_ins_sdd_get(update_date, authorization, psu_ip_address, opts = {})
      data, _status_code, _headers = money_ins_sdd_get_with_http_info(update_date, authorization, psu_ip_address, opts)
      data
    end

    # List of money-in by SDD
    # Returns the list of money-in by SDD which status has changed since the input date.
    # @param update_date UTC Unix timestamp.
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page index start from 1, let null to get all
    # @option opts [Integer] :limit default 20, let it null if no pagination
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [Array<(GetMoneyInSddOutput, Fixnum, Hash)>] GetMoneyInSddOutput data, response status code and response headers
    def money_ins_sdd_get_with_http_info(update_date, authorization, psu_ip_address, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MoneyInsApi.money_ins_sdd_get ...'
      end
      # verify the required parameter 'update_date' is set
      if @api_client.config.client_side_validation && update_date.nil?
        fail ArgumentError, "Missing the required parameter 'update_date' when calling MoneyInsApi.money_ins_sdd_get"
      end
      if @api_client.config.client_side_validation && update_date !~ Regexp.new(/^-?\\d{1,12}$/)
        fail ArgumentError, "invalid value for 'update_date' when calling MoneyInsApi.money_ins_sdd_get, must conform to the pattern /^-?\\d{1,12}$/."
      end

      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling MoneyInsApi.money_ins_sdd_get"
      end
      # verify the required parameter 'psu_ip_address' is set
      if @api_client.config.client_side_validation && psu_ip_address.nil?
        fail ArgumentError, "Missing the required parameter 'psu_ip_address' when calling MoneyInsApi.money_ins_sdd_get"
      end
      # resource path
      local_var_path = '/v2/moneyins/sdd'

      # query parameters
      query_params = {}
      query_params[:'updateDate'] = update_date
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Authorization'] = authorization
      header_params[:'PSU-IP-Address'] = psu_ip_address
      header_params[:'PSU-Accept-Language'] = opts[:'psu_accept_language'] if !opts[:'psu_accept_language'].nil?
      header_params[:'PSU-User-Agent'] = opts[:'psu_user_agent'] if !opts[:'psu_user_agent'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetMoneyInSddOutput')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MoneyInsApi#money_ins_sdd_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Request a Direct Debit (SDD)
    # SDD requests are sent to our bank every working day at 10:30.<br />  Prequisites:<br />  1. You allow your CLIENT to fill in a mandate, and pre-register it with Lemon Way, by calling RegisterSddMandate<br />  2. Follow the SignDocumentInit process in order to electronically sign the mandate<br />  Request the direct debit:<br />  1. You call MoneyInSddInit to ask for a debit<br />  2. Lemon Way sends the request to the bank every working day at 10:30, Paris time.<br />  3. Once the request is sent to the bank, the actual debit on the CLIENT's bank account will happen about 1 working days later. If you indicate a date, the debit will happen on the given date.<br />  4. When Lemon Way receives the payment, the SDD payment will be validated and the CLIENT payment account will be credited<br />  5. You can call GetMoneyInSdd once a day in order to know which payments have been validated.You can also use our notification functionality.<br />
    # @param parameters 
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [MoneyInSddInitOutput]
    def money_ins_sdd_init_post(parameters, authorization, psu_ip_address, opts = {})
      data, _status_code, _headers = money_ins_sdd_init_post_with_http_info(parameters, authorization, psu_ip_address, opts)
      data
    end

    # Request a Direct Debit (SDD)
    # SDD requests are sent to our bank every working day at 10:30.&lt;br /&gt;  Prequisites:&lt;br /&gt;  1. You allow your CLIENT to fill in a mandate, and pre-register it with Lemon Way, by calling RegisterSddMandate&lt;br /&gt;  2. Follow the SignDocumentInit process in order to electronically sign the mandate&lt;br /&gt;  Request the direct debit:&lt;br /&gt;  1. You call MoneyInSddInit to ask for a debit&lt;br /&gt;  2. Lemon Way sends the request to the bank every working day at 10:30, Paris time.&lt;br /&gt;  3. Once the request is sent to the bank, the actual debit on the CLIENT&#39;s bank account will happen about 1 working days later. If you indicate a date, the debit will happen on the given date.&lt;br /&gt;  4. When Lemon Way receives the payment, the SDD payment will be validated and the CLIENT payment account will be credited&lt;br /&gt;  5. You can call GetMoneyInSdd once a day in order to know which payments have been validated.You can also use our notification functionality.&lt;br /&gt;
    # @param parameters 
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [Array<(MoneyInSddInitOutput, Fixnum, Hash)>] MoneyInSddInitOutput data, response status code and response headers
    def money_ins_sdd_init_post_with_http_info(parameters, authorization, psu_ip_address, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MoneyInsApi.money_ins_sdd_init_post ...'
      end
      # verify the required parameter 'parameters' is set
      if @api_client.config.client_side_validation && parameters.nil?
        fail ArgumentError, "Missing the required parameter 'parameters' when calling MoneyInsApi.money_ins_sdd_init_post"
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling MoneyInsApi.money_ins_sdd_init_post"
      end
      # verify the required parameter 'psu_ip_address' is set
      if @api_client.config.client_side_validation && psu_ip_address.nil?
        fail ArgumentError, "Missing the required parameter 'psu_ip_address' when calling MoneyInsApi.money_ins_sdd_init_post"
      end
      # resource path
      local_var_path = '/v2/moneyins/sdd/init'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Authorization'] = authorization
      header_params[:'PSU-IP-Address'] = psu_ip_address
      header_params[:'PSU-Accept-Language'] = opts[:'psu_accept_language'] if !opts[:'psu_accept_language'].nil?
      header_params[:'PSU-User-Agent'] = opts[:'psu_user_agent'] if !opts[:'psu_user_agent'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(parameters)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MoneyInSddInitOutput')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MoneyInsApi#money_ins_sdd_init_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Pre-register an SDD mandate
    # This method allows you to pre-register a mandate. It will then be pending approval from Lemon Way. <br />
    # @param parameters 
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [RegisterSddMandateOutput]
    def money_ins_sdd_mandate_post(parameters, authorization, psu_ip_address, opts = {})
      data, _status_code, _headers = money_ins_sdd_mandate_post_with_http_info(parameters, authorization, psu_ip_address, opts)
      data
    end

    # Pre-register an SDD mandate
    # This method allows you to pre-register a mandate. It will then be pending approval from Lemon Way. &lt;br /&gt;
    # @param parameters 
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [Array<(RegisterSddMandateOutput, Fixnum, Hash)>] RegisterSddMandateOutput data, response status code and response headers
    def money_ins_sdd_mandate_post_with_http_info(parameters, authorization, psu_ip_address, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MoneyInsApi.money_ins_sdd_mandate_post ...'
      end
      # verify the required parameter 'parameters' is set
      if @api_client.config.client_side_validation && parameters.nil?
        fail ArgumentError, "Missing the required parameter 'parameters' when calling MoneyInsApi.money_ins_sdd_mandate_post"
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling MoneyInsApi.money_ins_sdd_mandate_post"
      end
      # verify the required parameter 'psu_ip_address' is set
      if @api_client.config.client_side_validation && psu_ip_address.nil?
        fail ArgumentError, "Missing the required parameter 'psu_ip_address' when calling MoneyInsApi.money_ins_sdd_mandate_post"
      end
      # resource path
      local_var_path = '/v2/moneyins/sdd/mandate'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Authorization'] = authorization
      header_params[:'PSU-IP-Address'] = psu_ip_address
      header_params[:'PSU-Accept-Language'] = opts[:'psu_accept_language'] if !opts[:'psu_accept_language'].nil?
      header_params[:'PSU-User-Agent'] = opts[:'psu_user_agent'] if !opts[:'psu_user_agent'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(parameters)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RegisterSddMandateOutput')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MoneyInsApi#money_ins_sdd_mandate_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Deactivate a mandate
    # This allows you to deactivate a mandate
    # @param mandatid 
    # @param parameters 
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [UnregisterSddMandateOutput]
    def money_ins_sdd_mandate_unregister_put(mandatid, parameters, authorization, psu_ip_address, opts = {})
      data, _status_code, _headers = money_ins_sdd_mandate_unregister_put_with_http_info(mandatid, parameters, authorization, psu_ip_address, opts)
      data
    end

    # Deactivate a mandate
    # This allows you to deactivate a mandate
    # @param mandatid 
    # @param parameters 
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [Array<(UnregisterSddMandateOutput, Fixnum, Hash)>] UnregisterSddMandateOutput data, response status code and response headers
    def money_ins_sdd_mandate_unregister_put_with_http_info(mandatid, parameters, authorization, psu_ip_address, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MoneyInsApi.money_ins_sdd_mandate_unregister_put ...'
      end
      # verify the required parameter 'mandatid' is set
      if @api_client.config.client_side_validation && mandatid.nil?
        fail ArgumentError, "Missing the required parameter 'mandatid' when calling MoneyInsApi.money_ins_sdd_mandate_unregister_put"
      end
      # verify the required parameter 'parameters' is set
      if @api_client.config.client_side_validation && parameters.nil?
        fail ArgumentError, "Missing the required parameter 'parameters' when calling MoneyInsApi.money_ins_sdd_mandate_unregister_put"
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling MoneyInsApi.money_ins_sdd_mandate_unregister_put"
      end
      # verify the required parameter 'psu_ip_address' is set
      if @api_client.config.client_side_validation && psu_ip_address.nil?
        fail ArgumentError, "Missing the required parameter 'psu_ip_address' when calling MoneyInsApi.money_ins_sdd_mandate_unregister_put"
      end
      # resource path
      local_var_path = '/v2/moneyins/sdd/mandate/{mandatid}/unregister'.sub('{' + 'mandatid' + '}', mandatid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Authorization'] = authorization
      header_params[:'PSU-IP-Address'] = psu_ip_address
      header_params[:'PSU-Accept-Language'] = opts[:'psu_accept_language'] if !opts[:'psu_accept_language'].nil?
      header_params[:'PSU-User-Agent'] = opts[:'psu_user_agent'] if !opts[:'psu_user_agent'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(parameters)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UnregisterSddMandateOutput')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MoneyInsApi#money_ins_sdd_mandate_unregister_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Initialize Sofort payment
    # You will need 2 integration points on your code:  <ul><li>One call to DIRECTKIT to init Sofort payment to credit the payment account</li><li>One redirection from your WHITE BRAND web site to the return URL by Sofort</li></ul>
    # @param parameters 
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [MoneyInSofortInitOutput]
    def money_ins_sofort_init_post(parameters, authorization, psu_ip_address, opts = {})
      data, _status_code, _headers = money_ins_sofort_init_post_with_http_info(parameters, authorization, psu_ip_address, opts)
      data
    end

    # Initialize Sofort payment
    # You will need 2 integration points on your code:  &lt;ul&gt;&lt;li&gt;One call to DIRECTKIT to init Sofort payment to credit the payment account&lt;/li&gt;&lt;li&gt;One redirection from your WHITE BRAND web site to the return URL by Sofort&lt;/li&gt;&lt;/ul&gt;
    # @param parameters 
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [Array<(MoneyInSofortInitOutput, Fixnum, Hash)>] MoneyInSofortInitOutput data, response status code and response headers
    def money_ins_sofort_init_post_with_http_info(parameters, authorization, psu_ip_address, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MoneyInsApi.money_ins_sofort_init_post ...'
      end
      # verify the required parameter 'parameters' is set
      if @api_client.config.client_side_validation && parameters.nil?
        fail ArgumentError, "Missing the required parameter 'parameters' when calling MoneyInsApi.money_ins_sofort_init_post"
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling MoneyInsApi.money_ins_sofort_init_post"
      end
      # verify the required parameter 'psu_ip_address' is set
      if @api_client.config.client_side_validation && psu_ip_address.nil?
        fail ArgumentError, "Missing the required parameter 'psu_ip_address' when calling MoneyInsApi.money_ins_sofort_init_post"
      end
      # resource path
      local_var_path = '/v2/moneyins/sofort/init'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Authorization'] = authorization
      header_params[:'PSU-IP-Address'] = psu_ip_address
      header_params[:'PSU-Accept-Language'] = opts[:'psu_accept_language'] if !opts[:'psu_accept_language'].nil?
      header_params[:'PSU-User-Agent'] = opts[:'psu_user_agent'] if !opts[:'psu_user_agent'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(parameters)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MoneyInSofortInitOutput')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MoneyInsApi#money_ins_sofort_init_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Initialize Trustly payment
    # Trustly is a Swedish payment method used in 29 European countries. With Trustly, buy and pay from your bank account.
    # @param parameters 
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [MoneyInTrustlyInitOutput]
    def money_ins_trustly_init_post(parameters, authorization, psu_ip_address, opts = {})
      data, _status_code, _headers = money_ins_trustly_init_post_with_http_info(parameters, authorization, psu_ip_address, opts)
      data
    end

    # Initialize Trustly payment
    # Trustly is a Swedish payment method used in 29 European countries. With Trustly, buy and pay from your bank account.
    # @param parameters 
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [Array<(MoneyInTrustlyInitOutput, Fixnum, Hash)>] MoneyInTrustlyInitOutput data, response status code and response headers
    def money_ins_trustly_init_post_with_http_info(parameters, authorization, psu_ip_address, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MoneyInsApi.money_ins_trustly_init_post ...'
      end
      # verify the required parameter 'parameters' is set
      if @api_client.config.client_side_validation && parameters.nil?
        fail ArgumentError, "Missing the required parameter 'parameters' when calling MoneyInsApi.money_ins_trustly_init_post"
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling MoneyInsApi.money_ins_trustly_init_post"
      end
      # verify the required parameter 'psu_ip_address' is set
      if @api_client.config.client_side_validation && psu_ip_address.nil?
        fail ArgumentError, "Missing the required parameter 'psu_ip_address' when calling MoneyInsApi.money_ins_trustly_init_post"
      end
      # resource path
      local_var_path = '/v2/moneyins/trustly/init'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Authorization'] = authorization
      header_params[:'PSU-IP-Address'] = psu_ip_address
      header_params[:'PSU-Accept-Language'] = opts[:'psu_accept_language'] if !opts[:'psu_accept_language'].nil?
      header_params[:'PSU-User-Agent'] = opts[:'psu_user_agent'] if !opts[:'psu_user_agent'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(parameters)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MoneyInTrustlyInitOutput')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MoneyInsApi#money_ins_trustly_init_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Validation of a Money-In (deffered payment only)
    # This method is only used in differed/pre-authorization mode. You can only validate a pre-authrorized payment once.
    # @param transactionid 
    # @param parameters 
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [MoneyInValidateOutput]
    def money_ins_validate_put(transactionid, parameters, authorization, psu_ip_address, opts = {})
      data, _status_code, _headers = money_ins_validate_put_with_http_info(transactionid, parameters, authorization, psu_ip_address, opts)
      data
    end

    # Validation of a Money-In (deffered payment only)
    # This method is only used in differed/pre-authorization mode. You can only validate a pre-authrorized payment once.
    # @param transactionid 
    # @param parameters 
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [Array<(MoneyInValidateOutput, Fixnum, Hash)>] MoneyInValidateOutput data, response status code and response headers
    def money_ins_validate_put_with_http_info(transactionid, parameters, authorization, psu_ip_address, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MoneyInsApi.money_ins_validate_put ...'
      end
      # verify the required parameter 'transactionid' is set
      if @api_client.config.client_side_validation && transactionid.nil?
        fail ArgumentError, "Missing the required parameter 'transactionid' when calling MoneyInsApi.money_ins_validate_put"
      end
      # verify the required parameter 'parameters' is set
      if @api_client.config.client_side_validation && parameters.nil?
        fail ArgumentError, "Missing the required parameter 'parameters' when calling MoneyInsApi.money_ins_validate_put"
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling MoneyInsApi.money_ins_validate_put"
      end
      # verify the required parameter 'psu_ip_address' is set
      if @api_client.config.client_side_validation && psu_ip_address.nil?
        fail ArgumentError, "Missing the required parameter 'psu_ip_address' when calling MoneyInsApi.money_ins_validate_put"
      end
      # resource path
      local_var_path = '/v2/moneyins/{transactionid}/validate'.sub('{' + 'transactionid' + '}', transactionid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Authorization'] = authorization
      header_params[:'PSU-IP-Address'] = psu_ip_address
      header_params[:'PSU-Accept-Language'] = opts[:'psu_accept_language'] if !opts[:'psu_accept_language'].nil?
      header_params[:'PSU-User-Agent'] = opts[:'psu_user_agent'] if !opts[:'psu_user_agent'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(parameters)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MoneyInValidateOutput')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MoneyInsApi#money_ins_validate_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
