=begin
#Lemonway DirectKit API 2.0

## Introduction    This service provides methods for automating the management of the accounts and operations.    __A strict control access on the IP is applied, make sure you have the rights before requesting the API.__    Please note that this version of the API is in pilot stage, and therefore may evolve in the future. Should you be interested in integrating this version, please contact your Lemon Way account manager or <a href=\"https://support.lemonway.com/hc/requests/new\" target=\"_blank\">the support team</a>.    # Authentication    The authentication service strictly follow the __chapter 4.4.2__ [Access Token request](https://tools.ietf.org/html/rfc6749#section-4.4.2) of the __RFC 6749__.    The unique method exposed by the api provides a unique bearer access associate a unique directkit. All dikectkit and environment have their own access.    The bearer allow an application to consume the api Rest Directkit    __This response has these scenarios:__  * In case the bearer do not exist, the method create a new bearer.  * In case the bearer already exist, it return the actual bearer with the remaining time left.  * In case the bearer lifetime is over, a new one is created, the old one is permanently deleted.  * In case of failure, a http statut code error with succinct information for security purpose.    # oauth2    __cURL example__:    ```  curl -X POST \"https://authentication.lemonway.com/v1/token\"      -H \"accept: application/json;charset=UTF-8\"      -H \"Authorization: Basic 375d7fd6-f1c3-41ed-82c6-c273fe384318\"      -H \"Content_Type: application/x-www-form-urlencoded\"      -d \"grant_type=client_credentials\"  ```    The OAuth2 documentation is available at this link [OAuth2 authentication](https://172.31.0.84:8082/oauth2-public/token/swagger).    Once you call the method, and if the informations provided are corrects, you will get a response with a bearer.    Use the provided bearer to request the directkit service    __Response example__:  ```  {      \"access_token\": \"4442659a-bebc-4afb-8fbd-21d19ae11972\", // unique bearer access      \"token_type\": \"Bearer\",      \"expires_in\": 3600 // secondes  }  ```    ___Note: Use the same method to renew your bearer once it got expired___    # Notifications    The __WHITE BRAND__ may want to receive notifications when __certain events are triggered__ (e.g. on payment account status change, on documentation status change...).  These notifications can be received by e-mail (HTML format) or be sent to an information system (webhooks / callbacks through HTTP POST or GET). For more information about notifications, please visit [the notifications documentation](https://documentation.lemonway.com/en/notifications).  To activate notifications, please log on the __WHITE BRAND back-office__ and go to the \"__Configuration/Notifications__\" menu.

OpenAPI spec version: v2

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.12

=end

require 'uri'

module SwaggerClient
  class MoneyOutsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Cancellation of a Money-Out
    # With the \"Cancel method, the WHITE BRAND can cancel a MoneyOut / SDD.
    # @param transactionid 
    # @param parameters 
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [CancelMoneyOutOutput]
    def money_outs_cancel_put(transactionid, parameters, authorization, psu_ip_address, opts = {})
      data, _status_code, _headers = money_outs_cancel_put_with_http_info(transactionid, parameters, authorization, psu_ip_address, opts)
      data
    end

    # Cancellation of a Money-Out
    # With the \&quot;Cancel method, the WHITE BRAND can cancel a MoneyOut / SDD.
    # @param transactionid 
    # @param parameters 
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [Array<(CancelMoneyOutOutput, Fixnum, Hash)>] CancelMoneyOutOutput data, response status code and response headers
    def money_outs_cancel_put_with_http_info(transactionid, parameters, authorization, psu_ip_address, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MoneyOutsApi.money_outs_cancel_put ...'
      end
      # verify the required parameter 'transactionid' is set
      if @api_client.config.client_side_validation && transactionid.nil?
        fail ArgumentError, "Missing the required parameter 'transactionid' when calling MoneyOutsApi.money_outs_cancel_put"
      end
      # verify the required parameter 'parameters' is set
      if @api_client.config.client_side_validation && parameters.nil?
        fail ArgumentError, "Missing the required parameter 'parameters' when calling MoneyOutsApi.money_outs_cancel_put"
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling MoneyOutsApi.money_outs_cancel_put"
      end
      # verify the required parameter 'psu_ip_address' is set
      if @api_client.config.client_side_validation && psu_ip_address.nil?
        fail ArgumentError, "Missing the required parameter 'psu_ip_address' when calling MoneyOutsApi.money_outs_cancel_put"
      end
      # resource path
      local_var_path = '/v2/moneyouts/{transactionid}/cancel'.sub('{' + 'transactionid' + '}', transactionid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Authorization'] = authorization
      header_params[:'PSU-IP-Address'] = psu_ip_address
      header_params[:'PSU-Accept-Language'] = opts[:'psu_accept_language'] if !opts[:'psu_accept_language'].nil?
      header_params[:'PSU-User-Agent'] = opts[:'psu_user_agent'] if !opts[:'psu_user_agent'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(parameters)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CancelMoneyOutOutput')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MoneyOutsApi#money_outs_cancel_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Link a non-SEPA IBAN to a payment account
    # With \"RegisterIBANExtended\" method, our system links an IBAN outside of the geographical SEPA area to a Payment Account. A payment account can live without an IBAN. An IBAN is needed to do a MONEY-OUT. No IBAN is needed to perform a payment account to payment account payment. No IBAN is needed to make a MONEY-IN on a Payment Account.  <ul><li>Please only use this for IBANs outside of the geographical SEPA area.</li><li>Depending on your business, the IBAN will be automatically active or not, after you have called this functionality.If it is not automatically active, our control team will have to validate it before you can use it for a money-out.</li><li>By default, you can only register one IBAN per payment account, when you link a new IBAN all previous IBANs linked to the same payment account will be automatically deactivated.If you wish to link several IBANs to one payment account please contact us for approval.</li></ul>
    # @param parameters 
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [RegisterIBANExtendedOutput]
    def money_outs_iban_extended_post(parameters, authorization, psu_ip_address, opts = {})
      data, _status_code, _headers = money_outs_iban_extended_post_with_http_info(parameters, authorization, psu_ip_address, opts)
      data
    end

    # Link a non-SEPA IBAN to a payment account
    # With \&quot;RegisterIBANExtended\&quot; method, our system links an IBAN outside of the geographical SEPA area to a Payment Account. A payment account can live without an IBAN. An IBAN is needed to do a MONEY-OUT. No IBAN is needed to perform a payment account to payment account payment. No IBAN is needed to make a MONEY-IN on a Payment Account.  &lt;ul&gt;&lt;li&gt;Please only use this for IBANs outside of the geographical SEPA area.&lt;/li&gt;&lt;li&gt;Depending on your business, the IBAN will be automatically active or not, after you have called this functionality.If it is not automatically active, our control team will have to validate it before you can use it for a money-out.&lt;/li&gt;&lt;li&gt;By default, you can only register one IBAN per payment account, when you link a new IBAN all previous IBANs linked to the same payment account will be automatically deactivated.If you wish to link several IBANs to one payment account please contact us for approval.&lt;/li&gt;&lt;/ul&gt;
    # @param parameters 
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [Array<(RegisterIBANExtendedOutput, Fixnum, Hash)>] RegisterIBANExtendedOutput data, response status code and response headers
    def money_outs_iban_extended_post_with_http_info(parameters, authorization, psu_ip_address, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MoneyOutsApi.money_outs_iban_extended_post ...'
      end
      # verify the required parameter 'parameters' is set
      if @api_client.config.client_side_validation && parameters.nil?
        fail ArgumentError, "Missing the required parameter 'parameters' when calling MoneyOutsApi.money_outs_iban_extended_post"
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling MoneyOutsApi.money_outs_iban_extended_post"
      end
      # verify the required parameter 'psu_ip_address' is set
      if @api_client.config.client_side_validation && psu_ip_address.nil?
        fail ArgumentError, "Missing the required parameter 'psu_ip_address' when calling MoneyOutsApi.money_outs_iban_extended_post"
      end
      # resource path
      local_var_path = '/v2/moneyouts/iban/extended'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Authorization'] = authorization
      header_params[:'PSU-IP-Address'] = psu_ip_address
      header_params[:'PSU-Accept-Language'] = opts[:'psu_accept_language'] if !opts[:'psu_accept_language'].nil?
      header_params[:'PSU-User-Agent'] = opts[:'psu_user_agent'] if !opts[:'psu_user_agent'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(parameters)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RegisterIBANExtendedOutput')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MoneyOutsApi#money_outs_iban_extended_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the iban(s) associate to a payment account
    # @param accountid Account ID
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [AccountIbansOutput]
    def money_outs_iban_get(accountid, authorization, psu_ip_address, opts = {})
      data, _status_code, _headers = money_outs_iban_get_with_http_info(accountid, authorization, psu_ip_address, opts)
      data
    end

    # Get the iban(s) associate to a payment account
    # @param accountid Account ID
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [Array<(AccountIbansOutput, Fixnum, Hash)>] AccountIbansOutput data, response status code and response headers
    def money_outs_iban_get_with_http_info(accountid, authorization, psu_ip_address, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MoneyOutsApi.money_outs_iban_get ...'
      end
      # verify the required parameter 'accountid' is set
      if @api_client.config.client_side_validation && accountid.nil?
        fail ArgumentError, "Missing the required parameter 'accountid' when calling MoneyOutsApi.money_outs_iban_get"
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling MoneyOutsApi.money_outs_iban_get"
      end
      # verify the required parameter 'psu_ip_address' is set
      if @api_client.config.client_side_validation && psu_ip_address.nil?
        fail ArgumentError, "Missing the required parameter 'psu_ip_address' when calling MoneyOutsApi.money_outs_iban_get"
      end
      # resource path
      local_var_path = '/v2/moneyouts/{accountid}/iban'.sub('{' + 'accountid' + '}', accountid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Authorization'] = authorization
      header_params[:'PSU-IP-Address'] = psu_ip_address
      header_params[:'PSU-Accept-Language'] = opts[:'psu_accept_language'] if !opts[:'psu_accept_language'].nil?
      header_params[:'PSU-User-Agent'] = opts[:'psu_user_agent'] if !opts[:'psu_user_agent'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AccountIbansOutput')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MoneyOutsApi#money_outs_iban_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Link an IBAN (SEPA area) to a payment account
    # With \"RegisterIBAN\" method, our system links an IBAN to a Payment Account. A Payment Account can live without an IBAN. An IBAN is needed to do a MONEY-OUT.  No IBAN is needed to perform an ON-US payment. No IBAN is needed to make a MONEY-IN on a Payment Account.  <ul><li>Please use this for IBANs on the geographical SEPA zone only.</li><li>Depending on your business, the IBAN will be automatically active or not,   after you have called this functionality.If it is not automatically active, our control team will have to validate it before you can use it for a money-out.</li><li>By default, you can only register one IBAN per payment account, when you   link a new IBAN all previous IBANs linked to the same payment account will be automatically deactivated.If you wish to link several IBANs to one payment account please contact us for approval.</li></ul>
    # @param parameters 
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [RegisterIBANOutput]
    def money_outs_iban_post(parameters, authorization, psu_ip_address, opts = {})
      data, _status_code, _headers = money_outs_iban_post_with_http_info(parameters, authorization, psu_ip_address, opts)
      data
    end

    # Link an IBAN (SEPA area) to a payment account
    # With \&quot;RegisterIBAN\&quot; method, our system links an IBAN to a Payment Account. A Payment Account can live without an IBAN. An IBAN is needed to do a MONEY-OUT.  No IBAN is needed to perform an ON-US payment. No IBAN is needed to make a MONEY-IN on a Payment Account.  &lt;ul&gt;&lt;li&gt;Please use this for IBANs on the geographical SEPA zone only.&lt;/li&gt;&lt;li&gt;Depending on your business, the IBAN will be automatically active or not,   after you have called this functionality.If it is not automatically active, our control team will have to validate it before you can use it for a money-out.&lt;/li&gt;&lt;li&gt;By default, you can only register one IBAN per payment account, when you   link a new IBAN all previous IBANs linked to the same payment account will be automatically deactivated.If you wish to link several IBANs to one payment account please contact us for approval.&lt;/li&gt;&lt;/ul&gt;
    # @param parameters 
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [Array<(RegisterIBANOutput, Fixnum, Hash)>] RegisterIBANOutput data, response status code and response headers
    def money_outs_iban_post_with_http_info(parameters, authorization, psu_ip_address, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MoneyOutsApi.money_outs_iban_post ...'
      end
      # verify the required parameter 'parameters' is set
      if @api_client.config.client_side_validation && parameters.nil?
        fail ArgumentError, "Missing the required parameter 'parameters' when calling MoneyOutsApi.money_outs_iban_post"
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling MoneyOutsApi.money_outs_iban_post"
      end
      # verify the required parameter 'psu_ip_address' is set
      if @api_client.config.client_side_validation && psu_ip_address.nil?
        fail ArgumentError, "Missing the required parameter 'psu_ip_address' when calling MoneyOutsApi.money_outs_iban_post"
      end
      # resource path
      local_var_path = '/v2/moneyouts/iban'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Authorization'] = authorization
      header_params[:'PSU-IP-Address'] = psu_ip_address
      header_params[:'PSU-Accept-Language'] = opts[:'psu_accept_language'] if !opts[:'psu_accept_language'].nil?
      header_params[:'PSU-User-Agent'] = opts[:'psu_user_agent'] if !opts[:'psu_user_agent'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(parameters)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RegisterIBANOutput')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MoneyOutsApi#money_outs_iban_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Link a non-SEPA IBAN to a payment account
    # With \"UnregisterIBAN\" method, our system disable an IBAN from a Payment Account.A Payment Account can live without an IBAN.An IBAN is needed to do a MONEY-OUT.No IBAN is needed to perform an ON-US payment. No IBAN is needed to make a MONEY-IN on a Payment Account.
    # @param iban_id 
    # @param parameters 
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [UnregisterIBANOutput]
    def money_outs_iban_unregister_put(iban_id, parameters, authorization, psu_ip_address, opts = {})
      data, _status_code, _headers = money_outs_iban_unregister_put_with_http_info(iban_id, parameters, authorization, psu_ip_address, opts)
      data
    end

    # Link a non-SEPA IBAN to a payment account
    # With \&quot;UnregisterIBAN\&quot; method, our system disable an IBAN from a Payment Account.A Payment Account can live without an IBAN.An IBAN is needed to do a MONEY-OUT.No IBAN is needed to perform an ON-US payment. No IBAN is needed to make a MONEY-IN on a Payment Account.
    # @param iban_id 
    # @param parameters 
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [Array<(UnregisterIBANOutput, Fixnum, Hash)>] UnregisterIBANOutput data, response status code and response headers
    def money_outs_iban_unregister_put_with_http_info(iban_id, parameters, authorization, psu_ip_address, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MoneyOutsApi.money_outs_iban_unregister_put ...'
      end
      # verify the required parameter 'iban_id' is set
      if @api_client.config.client_side_validation && iban_id.nil?
        fail ArgumentError, "Missing the required parameter 'iban_id' when calling MoneyOutsApi.money_outs_iban_unregister_put"
      end
      # verify the required parameter 'parameters' is set
      if @api_client.config.client_side_validation && parameters.nil?
        fail ArgumentError, "Missing the required parameter 'parameters' when calling MoneyOutsApi.money_outs_iban_unregister_put"
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling MoneyOutsApi.money_outs_iban_unregister_put"
      end
      # verify the required parameter 'psu_ip_address' is set
      if @api_client.config.client_side_validation && psu_ip_address.nil?
        fail ArgumentError, "Missing the required parameter 'psu_ip_address' when calling MoneyOutsApi.money_outs_iban_unregister_put"
      end
      # resource path
      local_var_path = '/v2/moneyouts/iban/{IbanId}/unregister'.sub('{' + 'IbanId' + '}', iban_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])
      header_params[:'Authorization'] = authorization
      header_params[:'PSU-IP-Address'] = psu_ip_address
      header_params[:'PSU-Accept-Language'] = opts[:'psu_accept_language'] if !opts[:'psu_accept_language'].nil?
      header_params[:'PSU-User-Agent'] = opts[:'psu_user_agent'] if !opts[:'psu_user_agent'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(parameters)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UnregisterIBANOutput')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MoneyOutsApi#money_outs_iban_unregister_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # looking for a money-out
    # Use this method to get and check all MONEY-OUT information.
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :transactionid MONEY-OUT ID.
    # @option opts [String] :transaction_comment MONEY-OUT Comment.
    # @option opts [Integer] :page index start from 1, let null to get all
    # @option opts [Integer] :limit default 20, let it null if no pagination
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [GetMoneyOutTransDetailsOutput]
    def money_outs_money_out_get(authorization, psu_ip_address, opts = {})
      data, _status_code, _headers = money_outs_money_out_get_with_http_info(authorization, psu_ip_address, opts)
      data
    end

    # looking for a money-out
    # Use this method to get and check all MONEY-OUT information.
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :transactionid MONEY-OUT ID.
    # @option opts [String] :transaction_comment MONEY-OUT Comment.
    # @option opts [Integer] :page index start from 1, let null to get all
    # @option opts [Integer] :limit default 20, let it null if no pagination
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [Array<(GetMoneyOutTransDetailsOutput, Fixnum, Hash)>] GetMoneyOutTransDetailsOutput data, response status code and response headers
    def money_outs_money_out_get_with_http_info(authorization, psu_ip_address, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MoneyOutsApi.money_outs_money_out_get ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling MoneyOutsApi.money_outs_money_out_get"
      end
      # verify the required parameter 'psu_ip_address' is set
      if @api_client.config.client_side_validation && psu_ip_address.nil?
        fail ArgumentError, "Missing the required parameter 'psu_ip_address' when calling MoneyOutsApi.money_outs_money_out_get"
      end
      if @api_client.config.client_side_validation && !opts[:'transaction_comment'].nil? && opts[:'transaction_comment'].to_s.length > 140
        fail ArgumentError, 'invalid value for "opts[:"transaction_comment"]" when calling MoneyOutsApi.money_outs_money_out_get, the character length must be smaller than or equal to 140.'
      end

      if @api_client.config.client_side_validation && !opts[:'transaction_comment'].nil? && opts[:'transaction_comment'].to_s.length < 0
        fail ArgumentError, 'invalid value for "opts[:"transaction_comment"]" when calling MoneyOutsApi.money_outs_money_out_get, the character length must be great than or equal to 0.'
      end

      # resource path
      local_var_path = '/v2/moneyouts'

      # query parameters
      query_params = {}
      query_params[:'transactionid'] = opts[:'transactionid'] if !opts[:'transactionid'].nil?
      query_params[:'transactionComment'] = opts[:'transaction_comment'] if !opts[:'transaction_comment'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Authorization'] = authorization
      header_params[:'PSU-IP-Address'] = psu_ip_address
      header_params[:'PSU-Accept-Language'] = opts[:'psu_accept_language'] if !opts[:'psu_accept_language'].nil?
      header_params[:'PSU-User-Agent'] = opts[:'psu_user_agent'] if !opts[:'psu_user_agent'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetMoneyOutTransDetailsOutput')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MoneyOutsApi#money_outs_money_out_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # External fund transfer from a payment account to a bank account
    # How it works  Choose an IBAN if multiple IBAN exist for the Wallet.Choose an amount, not greater than the balance of the wallet. Call \"MoneyOut\", and the system performs the fund transfer to the IBAN if everything is clear, or returns an error message.  <ul><li>The payment account is debited immediately and the money is then received by the owner, on their bank account after 1 to 3 days, depending on the interbanking system and on the banks (SEPA is faster).</li><li>You can ask us to configure your platform so that your comment is included in the bank transfer message so your customer will see it on the bank statement.</li><li><ul><li>The full message will be in the following format \"XXXX-YYYY ZZZZ\", where : </li><li>XXXX is the name of your environment</li><li>YYYY is the ID of the money-out operation as you see it in the backoffice</li><li>ZZZZ is your comment.</li></ul></li><li>The full message cannot be longer than 35 characters (if longer, it will be cut), and only alphanumeric characters will be allowed(other characters will be replaced by spaces before it's sent to the bank).</li></ul>
    # @param parameters 
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [MoneyOutOutput]
    def money_outs_money_out_post(parameters, authorization, psu_ip_address, opts = {})
      data, _status_code, _headers = money_outs_money_out_post_with_http_info(parameters, authorization, psu_ip_address, opts)
      data
    end

    # External fund transfer from a payment account to a bank account
    # How it works  Choose an IBAN if multiple IBAN exist for the Wallet.Choose an amount, not greater than the balance of the wallet. Call \&quot;MoneyOut\&quot;, and the system performs the fund transfer to the IBAN if everything is clear, or returns an error message.  &lt;ul&gt;&lt;li&gt;The payment account is debited immediately and the money is then received by the owner, on their bank account after 1 to 3 days, depending on the interbanking system and on the banks (SEPA is faster).&lt;/li&gt;&lt;li&gt;You can ask us to configure your platform so that your comment is included in the bank transfer message so your customer will see it on the bank statement.&lt;/li&gt;&lt;li&gt;&lt;ul&gt;&lt;li&gt;The full message will be in the following format \&quot;XXXX-YYYY ZZZZ\&quot;, where : &lt;/li&gt;&lt;li&gt;XXXX is the name of your environment&lt;/li&gt;&lt;li&gt;YYYY is the ID of the money-out operation as you see it in the backoffice&lt;/li&gt;&lt;li&gt;ZZZZ is your comment.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;The full message cannot be longer than 35 characters (if longer, it will be cut), and only alphanumeric characters will be allowed(other characters will be replaced by spaces before it&#39;s sent to the bank).&lt;/li&gt;&lt;/ul&gt;
    # @param parameters 
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [Array<(MoneyOutOutput, Fixnum, Hash)>] MoneyOutOutput data, response status code and response headers
    def money_outs_money_out_post_with_http_info(parameters, authorization, psu_ip_address, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MoneyOutsApi.money_outs_money_out_post ...'
      end
      # verify the required parameter 'parameters' is set
      if @api_client.config.client_side_validation && parameters.nil?
        fail ArgumentError, "Missing the required parameter 'parameters' when calling MoneyOutsApi.money_outs_money_out_post"
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling MoneyOutsApi.money_outs_money_out_post"
      end
      # verify the required parameter 'psu_ip_address' is set
      if @api_client.config.client_side_validation && psu_ip_address.nil?
        fail ArgumentError, "Missing the required parameter 'psu_ip_address' when calling MoneyOutsApi.money_outs_money_out_post"
      end
      # resource path
      local_var_path = '/v2/moneyouts'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Authorization'] = authorization
      header_params[:'PSU-IP-Address'] = psu_ip_address
      header_params[:'PSU-Accept-Language'] = opts[:'psu_accept_language'] if !opts[:'psu_accept_language'].nil?
      header_params[:'PSU-User-Agent'] = opts[:'psu_user_agent'] if !opts[:'psu_user_agent'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(parameters)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MoneyOutOutput')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MoneyOutsApi#money_outs_money_out_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
