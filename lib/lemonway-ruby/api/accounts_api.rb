=begin
#Lemonway DirectKit API 2.0

## Introduction    This service provides methods for automating the management of the accounts and operations.    __A strict control access on the IP is applied, make sure you have the rights before requesting the API.__    Please note that this version of the API is in pilot stage, and therefore may evolve in the future. Should you be interested in integrating this version, please contact your Lemon Way account manager or <a href=\"https://support.lemonway.com/hc/requests/new\" target=\"_blank\">the support team</a>.    # Authentication    The authentication service strictly follow the __chapter 4.4.2__ [Access Token request](https://tools.ietf.org/html/rfc6749#section-4.4.2) of the __RFC 6749__.    The unique method exposed by the api provides a unique bearer access associate a unique directkit. All dikectkit and environment have their own access.    The bearer allow an application to consume the api Rest Directkit    __This response has these scenarios:__  * In case the bearer do not exist, the method create a new bearer.  * In case the bearer already exist, it return the actual bearer with the remaining time left.  * In case the bearer lifetime is over, a new one is created, the old one is permanently deleted.  * In case of failure, a http statut code error with succinct information for security purpose.    # oauth2    __cURL example__:    ```  curl -X POST \"https://authentication.lemonway.com/v1/token\"      -H \"accept: application/json;charset=UTF-8\"      -H \"Authorization: Basic 375d7fd6-f1c3-41ed-82c6-c273fe384318\"      -H \"Content_Type: application/x-www-form-urlencoded\"      -d \"grant_type=client_credentials\"  ```    The OAuth2 documentation is available at this link [OAuth2 authentication](https://172.31.0.84:8082/oauth2-public/token/swagger).    Once you call the method, and if the informations provided are corrects, you will get a response with a bearer.    Use the provided bearer to request the directkit service    __Response example__:  ```  {      \"access_token\": \"4442659a-bebc-4afb-8fbd-21d19ae11972\", // unique bearer access      \"token_type\": \"Bearer\",      \"expires_in\": 3600 // secondes  }  ```    ___Note: Use the same method to renew your bearer once it got expired___    # Notifications    The __WHITE BRAND__ may want to receive notifications when __certain events are triggered__ (e.g. on payment account status change, on documentation status change...).  These notifications can be received by e-mail (HTML format) or be sent to an information system (webhooks / callbacks through HTTP POST or GET). For more information about notifications, please visit [the notifications documentation](https://documentation.lemonway.com/en/notifications).  To activate notifications, please log on the __WHITE BRAND back-office__ and go to the \"__Configuration/Notifications__\" menu.

OpenAPI spec version: v2

Generated by: https://github.com/swagger-api/swagger-codegen.git
LemonWay Codegen version: 2.4.12

=end

require 'uri'

module LemonWayClient
  class AccountsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Getting detailed payment account data
    # This method is often used by your system, to get all information regarding a payment account: amount of money in the payment account, IBAN associated to the payment account, document uploaded for KYC(Know Your Customer)...               Everything about one payment account is here.<br />               Fill at least one search field.
    # @param accountid Account ID
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [AccountDetailsOutput]
    def accounts_account_single_get(accountid, authorization, psu_ip_address, opts = {})
      data, _status_code, _headers = accounts_account_single_get_with_http_info(accountid, authorization, psu_ip_address, opts)
      data
    end

    # Getting detailed payment account data
    # This method is often used by your system, to get all information regarding a payment account: amount of money in the payment account, IBAN associated to the payment account, document uploaded for KYC(Know Your Customer)...               Everything about one payment account is here.&lt;br /&gt;               Fill at least one search field.
    # @param accountid Account ID
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [Array<(AccountDetailsOutput, Fixnum, Hash)>] AccountDetailsOutput data, response status code and response headers
    def accounts_account_single_get_with_http_info(accountid, authorization, psu_ip_address, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.accounts_account_single_get ...'
      end
      # verify the required parameter 'accountid' is set
      if @api_client.config.client_side_validation && accountid.nil?
        fail ArgumentError, "Missing the required parameter 'accountid' when calling AccountsApi.accounts_account_single_get"
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling AccountsApi.accounts_account_single_get"
      end
      # verify the required parameter 'psu_ip_address' is set
      if @api_client.config.client_side_validation && psu_ip_address.nil?
        fail ArgumentError, "Missing the required parameter 'psu_ip_address' when calling AccountsApi.accounts_account_single_get"
      end
      # resource path
      local_var_path = '/v2/accounts/{accountid}'.sub('{' + 'accountid' + '}', accountid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Authorization'] = authorization
      header_params[:'PSU-IP-Address'] = psu_ip_address
      header_params[:'PSU-Accept-Language'] = opts[:'psu_accept_language'] if !opts[:'psu_accept_language'].nil?
      header_params[:'PSU-User-Agent'] = opts[:'psu_user_agent'] if !opts[:'psu_user_agent'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AccountDetailsOutput')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#accounts_account_single_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Getting all payments accounts balances
    # Use GetBalances to get all payment accounts which balance have changed since the input date,               or all the balances of payment accounts with internal ID between payment accountIdStart and payment accountIdEnd.
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :update_date Date in UTC Seconds.  Leave empty if you wish to use payment account IDs instead.
    # @option opts [Integer] :internal_account_id_start First payment account internal ID, starting from 12.
    # @option opts [Integer] :internal_account_id_end Last payment account internal ID, starting from 12.
    # @option opts [Integer] :page index start from 1, let null to get all
    # @option opts [Integer] :limit default 20, let it null if no pagination
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [AccountBalanceOutput]
    def accounts_balances_get(authorization, psu_ip_address, opts = {})
      data, _status_code, _headers = accounts_balances_get_with_http_info(authorization, psu_ip_address, opts)
      data
    end

    # Getting all payments accounts balances
    # Use GetBalances to get all payment accounts which balance have changed since the input date,               or all the balances of payment accounts with internal ID between payment accountIdStart and payment accountIdEnd.
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :update_date Date in UTC Seconds.  Leave empty if you wish to use payment account IDs instead.
    # @option opts [Integer] :internal_account_id_start First payment account internal ID, starting from 12.
    # @option opts [Integer] :internal_account_id_end Last payment account internal ID, starting from 12.
    # @option opts [Integer] :page index start from 1, let null to get all
    # @option opts [Integer] :limit default 20, let it null if no pagination
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [Array<(AccountBalanceOutput, Fixnum, Hash)>] AccountBalanceOutput data, response status code and response headers
    def accounts_balances_get_with_http_info(authorization, psu_ip_address, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.accounts_balances_get ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling AccountsApi.accounts_balances_get"
      end
      # verify the required parameter 'psu_ip_address' is set
      if @api_client.config.client_side_validation && psu_ip_address.nil?
        fail ArgumentError, "Missing the required parameter 'psu_ip_address' when calling AccountsApi.accounts_balances_get"
      end
      if @api_client.config.client_side_validation && !opts[:'update_date'].nil? && opts[:'update_date'] !~ Regexp.new(/^-?\\d{1,12}$/)
        fail ArgumentError, "invalid value for 'opts[:\"update_date\"]' when calling AccountsApi.accounts_balances_get, must conform to the pattern /^-?\\d{1,12}$/."
      end

      if @api_client.config.client_side_validation && !opts[:'internal_account_id_start'].nil? && opts[:'internal_account_id_start'] !~ Regexp.new(/^\\d{1,19}$/)
        fail ArgumentError, "invalid value for 'opts[:\"internal_account_id_start\"]' when calling AccountsApi.accounts_balances_get, must conform to the pattern /^\\d{1,19}$/."
      end

      if @api_client.config.client_side_validation && !opts[:'internal_account_id_end'].nil? && opts[:'internal_account_id_end'] !~ Regexp.new(/^\\d{1,19}$/)
        fail ArgumentError, "invalid value for 'opts[:\"internal_account_id_end\"]' when calling AccountsApi.accounts_balances_get, must conform to the pattern /^\\d{1,19}$/."
      end

      # resource path
      local_var_path = '/v2/accounts/balances'

      # query parameters
      query_params = {}
      query_params[:'updateDate'] = opts[:'update_date'] if !opts[:'update_date'].nil?
      query_params[:'internalAccountIdStart'] = opts[:'internal_account_id_start'] if !opts[:'internal_account_id_start'].nil?
      query_params[:'internalAccountIdEnd'] = opts[:'internal_account_id_end'] if !opts[:'internal_account_id_end'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Authorization'] = authorization
      header_params[:'PSU-IP-Address'] = psu_ip_address
      header_params[:'PSU-Accept-Language'] = opts[:'psu_accept_language'] if !opts[:'psu_accept_language'].nil?
      header_params[:'PSU-User-Agent'] = opts[:'psu_user_agent'] if !opts[:'psu_user_agent'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AccountBalanceOutput')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#accounts_balances_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Getting payment account balance history
    # @param account_id Account ID
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :at_date Request balance at at given time in UTC Unix timestamp.
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [BalanceHistoryOutput]
    def accounts_balances_history_get(account_id, authorization, psu_ip_address, opts = {})
      data, _status_code, _headers = accounts_balances_history_get_with_http_info(account_id, authorization, psu_ip_address, opts)
      data
    end

    # Getting payment account balance history
    # @param account_id Account ID
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :at_date Request balance at at given time in UTC Unix timestamp.
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [Array<(BalanceHistoryOutput, Fixnum, Hash)>] BalanceHistoryOutput data, response status code and response headers
    def accounts_balances_history_get_with_http_info(account_id, authorization, psu_ip_address, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.accounts_balances_history_get ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountsApi.accounts_balances_history_get"
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling AccountsApi.accounts_balances_history_get"
      end
      # verify the required parameter 'psu_ip_address' is set
      if @api_client.config.client_side_validation && psu_ip_address.nil?
        fail ArgumentError, "Missing the required parameter 'psu_ip_address' when calling AccountsApi.accounts_balances_history_get"
      end
      if @api_client.config.client_side_validation && !opts[:'at_date'].nil? && opts[:'at_date'] !~ Regexp.new(/^-?\\d{1,12}$/)
        fail ArgumentError, "invalid value for 'opts[:\"at_date\"]' when calling AccountsApi.accounts_balances_history_get, must conform to the pattern /^-?\\d{1,12}$/."
      end

      # resource path
      local_var_path = '/v2/accounts/{accountId}/balances/history'.sub('{' + 'accountId' + '}', account_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'atDate'] = opts[:'at_date'] if !opts[:'at_date'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Authorization'] = authorization
      header_params[:'PSU-IP-Address'] = psu_ip_address
      header_params[:'PSU-Accept-Language'] = opts[:'psu_accept_language'] if !opts[:'psu_accept_language'].nil?
      header_params[:'PSU-User-Agent'] = opts[:'psu_user_agent'] if !opts[:'psu_user_agent'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BalanceHistoryOutput')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#accounts_balances_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Block, unblock account
    # @param accountid Account ID
    # @param parameters
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [AccountBlockedOutput]
    def accounts_blocked_put(accountid, parameters, authorization, psu_ip_address, opts = {})
      data, _status_code, _headers = accounts_blocked_put_with_http_info(accountid, parameters, authorization, psu_ip_address, opts)
      data
    end

    # Block, unblock account
    # @param accountid Account ID
    # @param parameters
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [Array<(AccountBlockedOutput, Fixnum, Hash)>] AccountBlockedOutput data, response status code and response headers
    def accounts_blocked_put_with_http_info(accountid, parameters, authorization, psu_ip_address, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.accounts_blocked_put ...'
      end
      # verify the required parameter 'accountid' is set
      if @api_client.config.client_side_validation && accountid.nil?
        fail ArgumentError, "Missing the required parameter 'accountid' when calling AccountsApi.accounts_blocked_put"
      end
      # verify the required parameter 'parameters' is set
      if @api_client.config.client_side_validation && parameters.nil?
        fail ArgumentError, "Missing the required parameter 'parameters' when calling AccountsApi.accounts_blocked_put"
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling AccountsApi.accounts_blocked_put"
      end
      # verify the required parameter 'psu_ip_address' is set
      if @api_client.config.client_side_validation && psu_ip_address.nil?
        fail ArgumentError, "Missing the required parameter 'psu_ip_address' when calling AccountsApi.accounts_blocked_put"
      end
      # resource path
      local_var_path = '/v2/accounts/{accountid}/blocked'.sub('{' + 'accountid' + '}', accountid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Authorization'] = authorization
      header_params[:'PSU-IP-Address'] = psu_ip_address
      header_params[:'PSU-Accept-Language'] = opts[:'psu_accept_language'] if !opts[:'psu_accept_language'].nil?
      header_params[:'PSU-User-Agent'] = opts[:'psu_user_agent'] if !opts[:'psu_user_agent'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(parameters)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AccountBlockedOutput')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#accounts_blocked_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the document(s) associate to a payment account
    # @param accountid Account ID
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [AccountDocumentsOutput]
    def accounts_document_get(accountid, authorization, psu_ip_address, opts = {})
      data, _status_code, _headers = accounts_document_get_with_http_info(accountid, authorization, psu_ip_address, opts)
      data
    end

    # Get the document(s) associate to a payment account
    # @param accountid Account ID
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [Array<(AccountDocumentsOutput, Fixnum, Hash)>] AccountDocumentsOutput data, response status code and response headers
    def accounts_document_get_with_http_info(accountid, authorization, psu_ip_address, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.accounts_document_get ...'
      end
      # verify the required parameter 'accountid' is set
      if @api_client.config.client_side_validation && accountid.nil?
        fail ArgumentError, "Missing the required parameter 'accountid' when calling AccountsApi.accounts_document_get"
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling AccountsApi.accounts_document_get"
      end
      # verify the required parameter 'psu_ip_address' is set
      if @api_client.config.client_side_validation && psu_ip_address.nil?
        fail ArgumentError, "Missing the required parameter 'psu_ip_address' when calling AccountsApi.accounts_document_get"
      end
      # resource path
      local_var_path = '/v2/accounts/{accountid}/documents'.sub('{' + 'accountid' + '}', accountid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Authorization'] = authorization
      header_params[:'PSU-IP-Address'] = psu_ip_address
      header_params[:'PSU-Accept-Language'] = opts[:'psu_accept_language'] if !opts[:'psu_accept_language'].nil?
      header_params[:'PSU-User-Agent'] = opts[:'psu_user_agent'] if !opts[:'psu_user_agent'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AccountDocumentsOutput')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#accounts_document_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Initialize electronic signature of a document
    # This functionality allows you to initialize an electronic signature. For now, only SDD mandates can be signed <br />   Prequisites:  <ul><li>A mandate has been initialized with RegisterSddMandate</li></ul>   This functionality will then require 3 integration points:  <ul><li>A call to SignDocumentInit of DIRECTKIT to initialize the signature request and get a token</li><li>A redirection from your website to the WEBKIT, with the token in GET parameter(see Finalize document signature)</li><li>A return page where your user will be redirected after the signature </li></ul>
    # @param accountid Payment account ID
    # @param documentid
    # @param parameters
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [SignDocumentInitOutput]
    def accounts_documents_sign_init_post(accountid, documentid, parameters, authorization, psu_ip_address, opts = {})
      data, _status_code, _headers = accounts_documents_sign_init_post_with_http_info(accountid, documentid, parameters, authorization, psu_ip_address, opts)
      data
    end

    # Initialize electronic signature of a document
    # This functionality allows you to initialize an electronic signature. For now, only SDD mandates can be signed &lt;br /&gt;   Prequisites:  &lt;ul&gt;&lt;li&gt;A mandate has been initialized with RegisterSddMandate&lt;/li&gt;&lt;/ul&gt;   This functionality will then require 3 integration points:  &lt;ul&gt;&lt;li&gt;A call to SignDocumentInit of DIRECTKIT to initialize the signature request and get a token&lt;/li&gt;&lt;li&gt;A redirection from your website to the WEBKIT, with the token in GET parameter(see Finalize document signature)&lt;/li&gt;&lt;li&gt;A return page where your user will be redirected after the signature &lt;/li&gt;&lt;/ul&gt;
    # @param accountid Payment account ID
    # @param documentid
    # @param parameters
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [Array<(SignDocumentInitOutput, Fixnum, Hash)>] SignDocumentInitOutput data, response status code and response headers
    def accounts_documents_sign_init_post_with_http_info(accountid, documentid, parameters, authorization, psu_ip_address, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.accounts_documents_sign_init_post ...'
      end
      # verify the required parameter 'accountid' is set
      if @api_client.config.client_side_validation && accountid.nil?
        fail ArgumentError, "Missing the required parameter 'accountid' when calling AccountsApi.accounts_documents_sign_init_post"
      end
      # verify the required parameter 'documentid' is set
      if @api_client.config.client_side_validation && documentid.nil?
        fail ArgumentError, "Missing the required parameter 'documentid' when calling AccountsApi.accounts_documents_sign_init_post"
      end
      # verify the required parameter 'parameters' is set
      if @api_client.config.client_side_validation && parameters.nil?
        fail ArgumentError, "Missing the required parameter 'parameters' when calling AccountsApi.accounts_documents_sign_init_post"
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling AccountsApi.accounts_documents_sign_init_post"
      end
      # verify the required parameter 'psu_ip_address' is set
      if @api_client.config.client_side_validation && psu_ip_address.nil?
        fail ArgumentError, "Missing the required parameter 'psu_ip_address' when calling AccountsApi.accounts_documents_sign_init_post"
      end
      # resource path
      local_var_path = '/v2/accounts/{accountid}/documents/{documentid}/signinit'.sub('{' + 'accountid' + '}', accountid.to_s).sub('{' + 'documentid' + '}', documentid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Authorization'] = authorization
      header_params[:'PSU-IP-Address'] = psu_ip_address
      header_params[:'PSU-Accept-Language'] = opts[:'psu_accept_language'] if !opts[:'psu_accept_language'].nil?
      header_params[:'PSU-User-Agent'] = opts[:'psu_user_agent'] if !opts[:'psu_user_agent'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(parameters)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SignDocumentInitOutput')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#accounts_documents_sign_init_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # document upload for KYC
    # Use UploadFile to upload documents into a payment account, with a file size smaller than 6 Mb.<br />               For security reason, only those documents types are accepted : PDF, JPG, JPEG et PNG.<br />               Refrain from using TIFF and prefer PDF.
    # @param accountid Account id
    # @param parameters
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [UploadDocumentOutput]
    def accounts_documents_upload_post(accountid, parameters, authorization, psu_ip_address, opts = {})
      data, _status_code, _headers = accounts_documents_upload_post_with_http_info(accountid, parameters, authorization, psu_ip_address, opts)
      data
    end

    # document upload for KYC
    # Use UploadFile to upload documents into a payment account, with a file size smaller than 6 Mb.&lt;br /&gt;               For security reason, only those documents types are accepted : PDF, JPG, JPEG et PNG.&lt;br /&gt;               Refrain from using TIFF and prefer PDF.
    # @param accountid Account id
    # @param parameters
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [Array<(UploadDocumentOutput, Fixnum, Hash)>] UploadDocumentOutput data, response status code and response headers
    def accounts_documents_upload_post_with_http_info(accountid, parameters, authorization, psu_ip_address, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.accounts_documents_upload_post ...'
      end
      # verify the required parameter 'accountid' is set
      if @api_client.config.client_side_validation && accountid.nil?
        fail ArgumentError, "Missing the required parameter 'accountid' when calling AccountsApi.accounts_documents_upload_post"
      end
      # verify the required parameter 'parameters' is set
      if @api_client.config.client_side_validation && parameters.nil?
        fail ArgumentError, "Missing the required parameter 'parameters' when calling AccountsApi.accounts_documents_upload_post"
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling AccountsApi.accounts_documents_upload_post"
      end
      # verify the required parameter 'psu_ip_address' is set
      if @api_client.config.client_side_validation && psu_ip_address.nil?
        fail ArgumentError, "Missing the required parameter 'psu_ip_address' when calling AccountsApi.accounts_documents_upload_post"
      end
      # resource path
      local_var_path = '/v2/accounts/{accountid}/documents/upload'.sub('{' + 'accountid' + '}', accountid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Authorization'] = authorization
      header_params[:'PSU-IP-Address'] = psu_ip_address
      header_params[:'PSU-Accept-Language'] = opts[:'psu_accept_language'] if !opts[:'psu_accept_language'].nil?
      header_params[:'PSU-User-Agent'] = opts[:'psu_user_agent'] if !opts[:'psu_user_agent'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(parameters)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UploadDocumentOutput')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#accounts_documents_upload_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a new individual account
    # By calling this method, the WHITE BRAND asks Lemon Way to create a individual payment account. <br />   1. Users enters its data on your web site, for example on his 'profile' area on your web site <br />   2. Your serveur calls our Accounts API <br />   3. Lemon Way creates the payment account in your environment <br />   4. Your system reads the answer of this method and informs the user <br />
    # @param parameters
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [RegisterIndividualAccountOutput]
    def accounts_individual_post(parameters, authorization, psu_ip_address, opts = {})
      data, _status_code, _headers = accounts_individual_post_with_http_info(parameters, authorization, psu_ip_address, opts)
      data
    end

    # Create a new individual account
    # By calling this method, the WHITE BRAND asks Lemon Way to create a individual payment account. &lt;br /&gt;   1. Users enters its data on your web site, for example on his &#39;profile&#39; area on your web site &lt;br /&gt;   2. Your serveur calls our Accounts API &lt;br /&gt;   3. Lemon Way creates the payment account in your environment &lt;br /&gt;   4. Your system reads the answer of this method and informs the user &lt;br /&gt;
    # @param parameters
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [Array<(RegisterIndividualAccountOutput, Fixnum, Hash)>] RegisterIndividualAccountOutput data, response status code and response headers
    def accounts_individual_post_with_http_info(parameters, authorization, psu_ip_address, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.accounts_individual_post ...'
      end
      # verify the required parameter 'parameters' is set
      if @api_client.config.client_side_validation && parameters.nil?
        fail ArgumentError, "Missing the required parameter 'parameters' when calling AccountsApi.accounts_individual_post"
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling AccountsApi.accounts_individual_post"
      end
      # verify the required parameter 'psu_ip_address' is set
      if @api_client.config.client_side_validation && psu_ip_address.nil?
        fail ArgumentError, "Missing the required parameter 'psu_ip_address' when calling AccountsApi.accounts_individual_post"
      end
      # resource path
      local_var_path = '/v2/accounts/individual'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Authorization'] = authorization
      header_params[:'PSU-IP-Address'] = psu_ip_address
      header_params[:'PSU-Accept-Language'] = opts[:'psu_accept_language'] if !opts[:'psu_accept_language'].nil?
      header_params[:'PSU-User-Agent'] = opts[:'psu_user_agent'] if !opts[:'psu_user_agent'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(parameters)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RegisterIndividualAccountOutput')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#accounts_individual_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update payment account data
    # With this method, the WHITE BRAND system asks Lemon Way to update information related to a CLIENT payment account.  1. The user enters his new data  2. The user calls the Lemon Way webservice  3. Lemon Way records data when it exists  4. The application processes Lemon Way's response and displays a confirmation message
    # @param accountid Account ID
    # @param parameters
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [UpdateIndividualAccountDetailsOutput]
    def accounts_individual_put(accountid, parameters, authorization, psu_ip_address, opts = {})
      data, _status_code, _headers = accounts_individual_put_with_http_info(accountid, parameters, authorization, psu_ip_address, opts)
      data
    end

    # Update payment account data
    # With this method, the WHITE BRAND system asks Lemon Way to update information related to a CLIENT payment account.  1. The user enters his new data  2. The user calls the Lemon Way webservice  3. Lemon Way records data when it exists  4. The application processes Lemon Way&#39;s response and displays a confirmation message
    # @param accountid Account ID
    # @param parameters
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [Array<(UpdateIndividualAccountDetailsOutput, Fixnum, Hash)>] UpdateIndividualAccountDetailsOutput data, response status code and response headers
    def accounts_individual_put_with_http_info(accountid, parameters, authorization, psu_ip_address, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.accounts_individual_put ...'
      end
      # verify the required parameter 'accountid' is set
      if @api_client.config.client_side_validation && accountid.nil?
        fail ArgumentError, "Missing the required parameter 'accountid' when calling AccountsApi.accounts_individual_put"
      end
      # verify the required parameter 'parameters' is set
      if @api_client.config.client_side_validation && parameters.nil?
        fail ArgumentError, "Missing the required parameter 'parameters' when calling AccountsApi.accounts_individual_put"
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling AccountsApi.accounts_individual_put"
      end
      # verify the required parameter 'psu_ip_address' is set
      if @api_client.config.client_side_validation && psu_ip_address.nil?
        fail ArgumentError, "Missing the required parameter 'psu_ip_address' when calling AccountsApi.accounts_individual_put"
      end
      # resource path
      local_var_path = '/v2/accounts/individual/{accountid}'.sub('{' + 'accountid' + '}', accountid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Authorization'] = authorization
      header_params[:'PSU-IP-Address'] = psu_ip_address
      header_params[:'PSU-Accept-Language'] = opts[:'psu_accept_language'] if !opts[:'psu_accept_language'].nil?
      header_params[:'PSU-User-Agent'] = opts[:'psu_user_agent'] if !opts[:'psu_user_agent'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(parameters)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UpdateIndividualAccountDetailsOutput')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#accounts_individual_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Looking for user, document, IBAN, modified since an entry date
    # Use this method to look for users, documents, IBAN for which the status has changed since a specified date. <br />  NOTE :<br />  This method will return the same user multiple times in the same request if his status has changed multiple time since a specified date.
    # @param update_date UTC Unix timestamp.
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page index start from 1, let null to get all
    # @option opts [Integer] :limit default 20, let it null if no pagination
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [KycStatusOutput]
    def accounts_kyc_status_get(update_date, authorization, psu_ip_address, opts = {})
      data, _status_code, _headers = accounts_kyc_status_get_with_http_info(update_date, authorization, psu_ip_address, opts)
      data
    end

    # Looking for user, document, IBAN, modified since an entry date
    # Use this method to look for users, documents, IBAN for which the status has changed since a specified date. &lt;br /&gt;  NOTE :&lt;br /&gt;  This method will return the same user multiple times in the same request if his status has changed multiple time since a specified date.
    # @param update_date UTC Unix timestamp.
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page index start from 1, let null to get all
    # @option opts [Integer] :limit default 20, let it null if no pagination
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [Array<(KycStatusOutput, Fixnum, Hash)>] KycStatusOutput data, response status code and response headers
    def accounts_kyc_status_get_with_http_info(update_date, authorization, psu_ip_address, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.accounts_kyc_status_get ...'
      end
      # verify the required parameter 'update_date' is set
      if @api_client.config.client_side_validation && update_date.nil?
        fail ArgumentError, "Missing the required parameter 'update_date' when calling AccountsApi.accounts_kyc_status_get"
      end
      if @api_client.config.client_side_validation && update_date !~ Regexp.new(/^-?\\d{1,12}$/)
        fail ArgumentError, "invalid value for 'update_date' when calling AccountsApi.accounts_kyc_status_get, must conform to the pattern /^-?\\d{1,12}$/."
      end

      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling AccountsApi.accounts_kyc_status_get"
      end
      # verify the required parameter 'psu_ip_address' is set
      if @api_client.config.client_side_validation && psu_ip_address.nil?
        fail ArgumentError, "Missing the required parameter 'psu_ip_address' when calling AccountsApi.accounts_kyc_status_get"
      end
      # resource path
      local_var_path = '/v2/accounts/kycstatus'

      # query parameters
      query_params = {}
      query_params[:'updateDate'] = update_date
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Authorization'] = authorization
      header_params[:'PSU-IP-Address'] = psu_ip_address
      header_params[:'PSU-Accept-Language'] = opts[:'psu_accept_language'] if !opts[:'psu_accept_language'].nil?
      header_params[:'PSU-User-Agent'] = opts[:'psu_user_agent'] if !opts[:'psu_user_agent'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'KycStatusOutput')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#accounts_kyc_status_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update payment account status
    # With this method, payment account status can be updated or closed.<br />  NOTE :<br />  This functionality is available depending on your contract.
    # @param accountid Account ID
    # @param parameters
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [UpdateAccountStatusOutput]
    def accounts_kycstatus_put(accountid, parameters, authorization, psu_ip_address, opts = {})
      data, _status_code, _headers = accounts_kycstatus_put_with_http_info(accountid, parameters, authorization, psu_ip_address, opts)
      data
    end

    # Update payment account status
    # With this method, payment account status can be updated or closed.&lt;br /&gt;  NOTE :&lt;br /&gt;  This functionality is available depending on your contract.
    # @param accountid Account ID
    # @param parameters
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [Array<(UpdateAccountStatusOutput, Fixnum, Hash)>] UpdateAccountStatusOutput data, response status code and response headers
    def accounts_kycstatus_put_with_http_info(accountid, parameters, authorization, psu_ip_address, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.accounts_kycstatus_put ...'
      end
      # verify the required parameter 'accountid' is set
      if @api_client.config.client_side_validation && accountid.nil?
        fail ArgumentError, "Missing the required parameter 'accountid' when calling AccountsApi.accounts_kycstatus_put"
      end
      # verify the required parameter 'parameters' is set
      if @api_client.config.client_side_validation && parameters.nil?
        fail ArgumentError, "Missing the required parameter 'parameters' when calling AccountsApi.accounts_kycstatus_put"
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling AccountsApi.accounts_kycstatus_put"
      end
      # verify the required parameter 'psu_ip_address' is set
      if @api_client.config.client_side_validation && psu_ip_address.nil?
        fail ArgumentError, "Missing the required parameter 'psu_ip_address' when calling AccountsApi.accounts_kycstatus_put"
      end
      # resource path
      local_var_path = '/v2/accounts/kycstatus/{accountid}'.sub('{' + 'accountid' + '}', accountid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Authorization'] = authorization
      header_params[:'PSU-IP-Address'] = psu_ip_address
      header_params[:'PSU-Accept-Language'] = opts[:'psu_accept_language'] if !opts[:'psu_accept_language'].nil?
      header_params[:'PSU-User-Agent'] = opts[:'psu_user_agent'] if !opts[:'psu_user_agent'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(parameters)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UpdateAccountStatusOutput')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#accounts_kycstatus_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a new legal account
    # By calling this method, the WHITE BRAND asks Lemon Way to create a legal payment account. <br />   1. Users enters its data on your web site, for example on his 'profile' area on your web site <br />   2. Your serveur calls our Accounts API <br />   3. Lemon Way creates the payment account in your environment <br />   4. Your system reads the answer of this method and informs the user <br />
    # @param parameters
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [RegisterLegalAccountOutput]
    def accounts_legal_post(parameters, authorization, psu_ip_address, opts = {})
      data, _status_code, _headers = accounts_legal_post_with_http_info(parameters, authorization, psu_ip_address, opts)
      data
    end

    # Create a new legal account
    # By calling this method, the WHITE BRAND asks Lemon Way to create a legal payment account. &lt;br /&gt;   1. Users enters its data on your web site, for example on his &#39;profile&#39; area on your web site &lt;br /&gt;   2. Your serveur calls our Accounts API &lt;br /&gt;   3. Lemon Way creates the payment account in your environment &lt;br /&gt;   4. Your system reads the answer of this method and informs the user &lt;br /&gt;
    # @param parameters
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [Array<(RegisterLegalAccountOutput, Fixnum, Hash)>] RegisterLegalAccountOutput data, response status code and response headers
    def accounts_legal_post_with_http_info(parameters, authorization, psu_ip_address, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.accounts_legal_post ...'
      end
      # verify the required parameter 'parameters' is set
      if @api_client.config.client_side_validation && parameters.nil?
        fail ArgumentError, "Missing the required parameter 'parameters' when calling AccountsApi.accounts_legal_post"
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling AccountsApi.accounts_legal_post"
      end
      # verify the required parameter 'psu_ip_address' is set
      if @api_client.config.client_side_validation && psu_ip_address.nil?
        fail ArgumentError, "Missing the required parameter 'psu_ip_address' when calling AccountsApi.accounts_legal_post"
      end
      # resource path
      local_var_path = '/v2/accounts/legal'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Authorization'] = authorization
      header_params[:'PSU-IP-Address'] = psu_ip_address
      header_params[:'PSU-Accept-Language'] = opts[:'psu_accept_language'] if !opts[:'psu_accept_language'].nil?
      header_params[:'PSU-User-Agent'] = opts[:'psu_user_agent'] if !opts[:'psu_user_agent'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(parameters)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RegisterLegalAccountOutput')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#accounts_legal_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update payment account data
    # With this method, the WHITE BRAND system asks Lemon Way to update information related to a CLIENT payment account.  1. The user enters his new data  2. The user calls the Lemon Way webservice  3. Lemon Way records data when it exists  4. The application processes Lemon Way's response and displays a confirmation message
    # @param accountid Account ID
    # @param parameters
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [UpdateLegalAccountDetailsOutput]
    def accounts_legal_single_put(accountid, parameters, authorization, psu_ip_address, opts = {})
      data, _status_code, _headers = accounts_legal_single_put_with_http_info(accountid, parameters, authorization, psu_ip_address, opts)
      data
    end

    # Update payment account data
    # With this method, the WHITE BRAND system asks Lemon Way to update information related to a CLIENT payment account.  1. The user enters his new data  2. The user calls the Lemon Way webservice  3. Lemon Way records data when it exists  4. The application processes Lemon Way&#39;s response and displays a confirmation message
    # @param accountid Account ID
    # @param parameters
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [Array<(UpdateLegalAccountDetailsOutput, Fixnum, Hash)>] UpdateLegalAccountDetailsOutput data, response status code and response headers
    def accounts_legal_single_put_with_http_info(accountid, parameters, authorization, psu_ip_address, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.accounts_legal_single_put ...'
      end
      # verify the required parameter 'accountid' is set
      if @api_client.config.client_side_validation && accountid.nil?
        fail ArgumentError, "Missing the required parameter 'accountid' when calling AccountsApi.accounts_legal_single_put"
      end
      # verify the required parameter 'parameters' is set
      if @api_client.config.client_side_validation && parameters.nil?
        fail ArgumentError, "Missing the required parameter 'parameters' when calling AccountsApi.accounts_legal_single_put"
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling AccountsApi.accounts_legal_single_put"
      end
      # verify the required parameter 'psu_ip_address' is set
      if @api_client.config.client_side_validation && psu_ip_address.nil?
        fail ArgumentError, "Missing the required parameter 'psu_ip_address' when calling AccountsApi.accounts_legal_single_put"
      end
      # resource path
      local_var_path = '/v2/accounts/legal/{accountid}'.sub('{' + 'accountid' + '}', accountid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Authorization'] = authorization
      header_params[:'PSU-IP-Address'] = psu_ip_address
      header_params[:'PSU-Accept-Language'] = opts[:'psu_accept_language'] if !opts[:'psu_accept_language'].nil?
      header_params[:'PSU-User-Agent'] = opts[:'psu_user_agent'] if !opts[:'psu_user_agent'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(parameters)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UpdateLegalAccountDetailsOutput')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#accounts_legal_single_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Getting detailed payments accounts data
    # This method is often used by your system, to get all information regarding a payment account: amount of money in the payment account, IBAN associated to the payment account, document uploaded for KYC(Know Your Customer)              Everything about one payment account is here.<br />               Fill at least one search field.
    # @param parameters
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [AccountDetailsBatchOutput]
    def accounts_retrieve_post(parameters, authorization, psu_ip_address, opts = {})
      data, _status_code, _headers = accounts_retrieve_post_with_http_info(parameters, authorization, psu_ip_address, opts)
      data
    end

    # Getting detailed payments accounts data
    # This method is often used by your system, to get all information regarding a payment account: amount of money in the payment account, IBAN associated to the payment account, document uploaded for KYC(Know Your Customer)              Everything about one payment account is here.&lt;br /&gt;               Fill at least one search field.
    # @param parameters
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [Array<(AccountDetailsBatchOutput, Fixnum, Hash)>] AccountDetailsBatchOutput data, response status code and response headers
    def accounts_retrieve_post_with_http_info(parameters, authorization, psu_ip_address, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.accounts_retrieve_post ...'
      end
      # verify the required parameter 'parameters' is set
      if @api_client.config.client_side_validation && parameters.nil?
        fail ArgumentError, "Missing the required parameter 'parameters' when calling AccountsApi.accounts_retrieve_post"
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling AccountsApi.accounts_retrieve_post"
      end
      # verify the required parameter 'psu_ip_address' is set
      if @api_client.config.client_side_validation && psu_ip_address.nil?
        fail ArgumentError, "Missing the required parameter 'psu_ip_address' when calling AccountsApi.accounts_retrieve_post"
      end
      # resource path
      local_var_path = '/v2/accounts/retrieve'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Authorization'] = authorization
      header_params[:'PSU-IP-Address'] = psu_ip_address
      header_params[:'PSU-Accept-Language'] = opts[:'psu_accept_language'] if !opts[:'psu_accept_language'].nil?
      header_params[:'PSU-User-Agent'] = opts[:'psu_user_agent'] if !opts[:'psu_user_agent'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(parameters)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AccountDetailsBatchOutput')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#accounts_retrieve_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get list of all transactions of a payment account
    # Use GetWalletTransHistory to retrieve the list of money-in, money-out and p2p (payment between payment account) of a given payment account.
    # @param account_id Accounbt ID
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start_date UTC Unix timestamp.  In order to return transactions initialized after startDate.  If the payment account is \&quot;SC\&quot; then this value is mandatory.
    # @option opts [String] :end_date UTC Unix timestamp.  In order to return transactions initialized before endDate.  If the payment account is \&quot;SC\&quot; then this value is mandatory and the time span cannot exceed 1 week.
    # @option opts [Integer] :page index start from 1, let null to get all
    # @option opts [Integer] :limit default 20, let it null if no pagination
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [AccountKycStatusOutput]
    def accounts_transactions_get(account_id, authorization, psu_ip_address, opts = {})
      data, _status_code, _headers = accounts_transactions_get_with_http_info(account_id, authorization, psu_ip_address, opts)
      data
    end

    # Get list of all transactions of a payment account
    # Use GetWalletTransHistory to retrieve the list of money-in, money-out and p2p (payment between payment account) of a given payment account.
    # @param account_id Accounbt ID
    # @param authorization Authorization bearer (OAuth 2)
    # @param psu_ip_address IP address of the final client (PSU).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start_date UTC Unix timestamp.  In order to return transactions initialized after startDate.  If the payment account is \&quot;SC\&quot; then this value is mandatory.
    # @option opts [String] :end_date UTC Unix timestamp.  In order to return transactions initialized before endDate.  If the payment account is \&quot;SC\&quot; then this value is mandatory and the time span cannot exceed 1 week.
    # @option opts [Integer] :page index start from 1, let null to get all
    # @option opts [Integer] :limit default 20, let it null if no pagination
    # @option opts [String] :psu_accept_language Response language accepted by final client (PSU). English by default
    # @option opts [String] :psu_user_agent User-agent of the final client (PSU).
    # @return [Array<(AccountKycStatusOutput, Fixnum, Hash)>] AccountKycStatusOutput data, response status code and response headers
    def accounts_transactions_get_with_http_info(account_id, authorization, psu_ip_address, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.accounts_transactions_get ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountsApi.accounts_transactions_get"
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling AccountsApi.accounts_transactions_get"
      end
      # verify the required parameter 'psu_ip_address' is set
      if @api_client.config.client_side_validation && psu_ip_address.nil?
        fail ArgumentError, "Missing the required parameter 'psu_ip_address' when calling AccountsApi.accounts_transactions_get"
      end
      if @api_client.config.client_side_validation && !opts[:'start_date'].nil? && opts[:'start_date'] !~ Regexp.new(/^-?\\d{1,12}$/)
        fail ArgumentError, "invalid value for 'opts[:\"start_date\"]' when calling AccountsApi.accounts_transactions_get, must conform to the pattern /^-?\\d{1,12}$/."
      end

      if @api_client.config.client_side_validation && !opts[:'end_date'].nil? && opts[:'end_date'] !~ Regexp.new(/^-?\\d{1,12}$/)
        fail ArgumentError, "invalid value for 'opts[:\"end_date\"]' when calling AccountsApi.accounts_transactions_get, must conform to the pattern /^-?\\d{1,12}$/."
      end

      # resource path
      local_var_path = '/v2/accounts/{accountId}/transactions'.sub('{' + 'accountId' + '}', account_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Authorization'] = authorization
      header_params[:'PSU-IP-Address'] = psu_ip_address
      header_params[:'PSU-Accept-Language'] = opts[:'psu_accept_language'] if !opts[:'psu_accept_language'].nil?
      header_params[:'PSU-User-Agent'] = opts[:'psu_user_agent'] if !opts[:'psu_user_agent'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AccountKycStatusOutput')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#accounts_transactions_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
